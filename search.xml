<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[正则demo]]></title>
      <url>/2018/04/02/%E6%AD%A3%E5%88%99demo/</url>
      <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'中国不好&lt;span style=""&gt;中国好&lt;/span&gt;中国&lt;span&gt;中国good&lt;/span&gt;中国垃圾'</span></div><div class="line">str.replace(<span class="regexp">/&lt;span.*?&lt;\/span&gt;|中国/g</span>, a =&gt; a.startsWith(<span class="string">'&lt;span'</span>) ? a : <span class="string">'美国'</span>)</div><div class="line"><span class="comment">// 美国不好&lt;span style=""&gt;中国好&lt;/span&gt;美国&lt;span&gt;中国good&lt;/span&gt;美国垃圾</span></div><div class="line"><span class="comment">// .*? 非贪婪模式</span></div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[interview-other]]></title>
      <url>/2018/03/21/interview-other/</url>
      <content type="html"><![CDATA[<ul>
<li><p>let和var区别<br>var 作用域为该语句所在的函数内，且存在变量提升<br>let 作用域为该语句所在的代码块内，不存在变量提升，且不允许重复声明</p>
<p>为什么var可以重复声明？<br>var a;<br>a = 2<br>编译器在执行的时候（从左往右）遇到 var a; 会询问当前作用域中是否已经存在叫 a 的变量<br>如果不存在，则让作用域声明一个新的变量 a , 若已存在，则忽略 var 继续向下编译<br>当遇到 a = 2 时同样会询问在当前作用域下是否有变量 a ，若存在，则 a 赋值为 2 （由于<br>第一步编译器忽略重复声明的 var，且作用域中已经有 a ，所以重复声明会发生值得覆盖而并不会报错）<br>若不存在，则顺着作用域链向上查找，若最终找到了变量a则将其赋值2，若没有找到，则让作用域声明一<br>个变量a并赋值为2。</p>
</li>
<li><p>CommonJs 中的 require/exports 和 ES6 中的 import/export 区别<br>主要是运行机制的不同</p>
<ol>
<li>CommonJs 模块的重要特性是加载时执行，即脚本代码在 require 的时候，就会全部执行。<br>一旦出现某个模块被 ‘循环加载‘，就只输出已经执行部分，还未执行的部分不会输出<br>a依赖b b依赖a 当a执行跳到b，在b运行时到该require(a)语句时，它返回的只是a已经执行过的那部分结果的返回（module.exports）<br><a href="http://www.ruanyifeng.com/blog/2015/11/circular-dependency.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/11/circular-dependency.html</a></li>
<li><p>ES6 模块是动态引用，不存在缓存值的问题。通过import去加载的时候，不会去执行模块，而只是生成一个引用。<br>多个模块 同时 import 了同一个文件（export了一个对象），改文件的代码只会执行一次，所有拿到的都是同一个对象。</p>
</li>
<li><p>import/export 最终都是编译为 require/exports 来执行的。</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>怎么判断两个对象是否相等<br>JSON.stringify(obj)==JSON.stringify(obj2);//true<br>但是如果属性的位置不一致就不行了</p>
</li>
<li><p>项目做过哪些性能优化</p>
<ol>
<li>减少 http 请求</li>
<li>减少 dns 查询</li>
<li>使用 cdn</li>
<li>避免重定向</li>
<li>图片懒加载</li>
<li>减少 dom 元素数量</li>
<li>减少 dom 操作</li>
</ol>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[aikeshi-summary]]></title>
      <url>/2018/03/19/aikeshi-summary/</url>
      <content type="html"><![CDATA[<ul>
<li>axios<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">defaultHeaders = &#123;</div><div class="line">  Accept: <span class="string">'application/json, text/plain, */*; charset=utf-8'</span>,</div><div class="line">  <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=unf-8'</span>,</div><div class="line">  Pragma: <span class="string">'no-cache'</span>,</div><div class="line">  <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</div><div class="line">&#125;</div><div class="line"><span class="built_in">Object</span>.assign(axios.defaults.headers.common, defaultHeaders)</div><div class="line"><span class="keyword">const</span> methods = [<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'delete'</span>]</div><div class="line"><span class="keyword">const</span> http = &#123;&#125;</div><div class="line"><span class="comment">// 统一外部的调用 方式</span></div><div class="line">methods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</div><div class="line">  http[method] = axios[method].bind(axios)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> addRequestInterceptor =</div><div class="line">axios.interceptors.request.use.bind(axios.interceptors.request)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> addResponseInterceptor =</div><div class="line">axios.interceptors.response.use.bind(axios.interceptors.response)</div><div class="line"></div><div class="line"></div><div class="line">install(Vue) &#123;</div><div class="line">  Vue.prototype.http = http</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[interview]]></title>
      <url>/2018/03/19/interview/</url>
      <content type="html"><![CDATA[<ul>
<li><p>Q: html中title属性和alt属性的区别？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;#&quot; alt=&quot;alt信息&quot; title=&quot;title信息&quot; /&gt;</div><div class="line">// 当图片不输出信息的时候，会显示alt信息 鼠标放上去会出现title信息</div><div class="line">// 当图片正常输出的时候，不会出现alt信息，鼠标放上去会出现title信息</div></pre></td></tr></table></figure>
</li>
<li><p>Q: ES5的继承和ES6的继承有什么区别？<br>ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上。<br>ES6的继承机制完全不同，实质上是先创建父类的实例对象this（所以必须先调用父类的super()方法），然后再用子类的构造函数修改this。</p>
</li>
<li><p>Q: 垂直居中<br><a href="https://www.cnblogs.com/zhouhuan/p/vertical_center.html" target="_blank" rel="external">https://www.cnblogs.com/zhouhuan/p/vertical_center.html</a></p>
</li>
<li><p>router.push 和 location.href 的区别<br>前者改变的是 hash 或 history.pushState() 再根据对应的事件去触发<br>后者是直接页面跳转（页面刷新，hash的时候不刷新）</p>
</li>
<li><p>菜单下拉列表<br>position: absoulte;<br>transform: scaley(0) // 指定Y轴（垂直方向）的缩放<br>transform-origin: 0 0 // X轴的动画起始位置 Y轴的动画起始位置<br>transition: all 0.5s</p>
<p>hover: transform: scaley(1)</p>
</li>
</ul>
<p>require.js</p>
<p>按需加载</p>
<p>vue<br>created之前 将数据可响应式<br>mounted之前 编译</p>
<p>$nextTick</p>
<p>array 改下标不能监听到 原因</p>
<p>$set</p>
<p>css<br>实现三角形</p>
<p>Array.isArray</p>
<p>单例</p>
<p>vue不能检测数组</p>
<ol>
<li>length 属性不能 Object.defineProperty</li>
<li>vue下索引也不允许更新，因为length = 5的数组，未必索引就有4，这个索引(属性)</li>
</ol>
<p>defineProperty<br>  configurable: 可配置<br>    默认false, 为true时表示 该属性描述符才能被改变 和 该属性能被删除<br>  enumerable: 可枚举<br>    默认false, 为true时才可枚举<br>  value: 该属性对应的值<br>    默认undefined<br>  writable: 可写<br>    默认fasle，为true时才能被赋值<br>  get: getter方法<br>    默认undefined 该返回值用作属性值<br>  set: setter方法<br>    默认undefined</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mouse Event]]></title>
      <url>/2017/11/17/mouse-Event/</url>
      <content type="html"><![CDATA[<ul>
<li>mousedown</li>
</ul>
<p>e.bubbles: 是否冒泡 true<br>e.target: 事件对应的 DOM 树顶级元素（最顶端的元素）<br>e.cancelable: 事件是否可以取消 true<br>e.clientX<br>e.clientY</p>
<ul>
<li>mouseup</li>
</ul>
<p>e.bubbles: true<br>e.target<br>e.cancelable</p>
<hr>
<ul>
<li>mouseover</li>
</ul>
<p>鼠标移动到目标元素上触发 移出不触发 在目标元素上父子节点切换移动也会触发(因为冒泡)<br>e.bubbles: true<br>e.cancelbale: true</p>
<ul>
<li>mouseout</li>
</ul>
<p>鼠标移出目标元素触发 在目标元素上父子节点切换移动也会触发(因为冒泡)<br>e.bubbles: true<br>e.cancelbale: true</p>
<ul>
<li>mousemove</li>
</ul>
<p>鼠标只要在目标上（包括子元素）移动就持续触发</p>
<hr>
<ul>
<li>mouseenter</li>
</ul>
<p>鼠标只在移入目标元素时触发<br>e.bubbles: false<br>e.cancelbale: false</p>
<ul>
<li>mouseleave</li>
</ul>
<p>鼠标只在移出目标元素时触发<br>e.bubbles: false<br>e.cancelbale: false</p>
<hr>
<ul>
<li>scroll</li>
</ul>
<p>在document视图或者一个element在滚动的时候，会触发元素的scroll事件。<br>e.bubbles: false<br>e.cancelable: false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.wrap overflow: scroll width: 100px height: 100px </div><div class="line">   .box width: 1000px height: 1000px</div><div class="line">(.wrap).addEventListener(&apos;scroll&apos;, fn)</div></pre></td></tr></table></figure></p>
<ul>
<li>wheel</li>
</ul>
<p>鼠标在目标元素上 滚轮滚动时触发 方向键或拖动滚动条不触发<br>e.bubbles: true<br>e.cancelbale: true</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[canvas入门]]></title>
      <url>/2017/10/28/canvas%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h4 id="线条的属性"><a href="#线条的属性" class="headerlink" title="线条的属性"></a>线条的属性</h4><ul>
<li>lineWidth: 设置线条的宽度</li>
<li>lineCap: 设置线条两端帽子的样式<br>  ‘butt’(default)<br>  ‘round’: 圆形<br>  ‘square’: 方形</li>
<li>lineJoin: 设置线条连接的样式<br>  ‘miter’(default): 尖角<pre><code>miterLimit: 设置尖角距离的最大值
</code></pre>  ‘bevel’: 衔接<br>  ‘round’: 圆角</li>
</ul>
<h4 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h4><ul>
<li>位移 translate(x, y) </li>
<li>旋转 rotate(deg)</li>
<li>缩放 scale(sx, sy) : 在 x 轴方向进行 sx 的缩放，在 y 轴方向进行 sy 的缩放</li>
</ul>
<p>因为变换是级联的（下一次的变换会在上一次的基础上变换）:<br>context.save() // 保存状态<br>context.restore() // 回到之前的保存状态</p>
<p>变换矩阵:<br>a c e<br>b d f<br>0 0 1</p>
<p>a,d: 水平，垂直缩放<br>b,c: 水平，垂直倾斜<br>e,f: 水平，垂直位移</p>
<p>transform(a, b, c, d, e, f)</p>
<blockquote>
<p>transform(1, 0, 0, 1, 0, 0) // 单位矩阵</p>
</blockquote>
<p>setTransform(a, b, c, d, e, f) // 先重置，再变换</p>
<h4 id="填充样式"><a href="#填充样式" class="headerlink" title="填充样式"></a>填充样式</h4><p>fillStyle:</p>
<p>Linear Gradient:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// step1:</span></div><div class="line"><span class="keyword">var</span> grd = context.createLinearGradient(xStart, yStart, xEnd, yEnd) <span class="comment">// 渐变线</span></div><div class="line"></div><div class="line"><span class="comment">// step2:</span></div><div class="line">grd.addColorStop(stop, color)</div><div class="line"><span class="comment">// 渐变线上的关键色</span></div><div class="line"><span class="comment">// stop:位置 [0.0 - 1.0]</span></div><div class="line"><span class="comment">// color: 颜色</span></div></pre></td></tr></table></figure></p>
<p>Radial Gradient(径向渐变)(圆环)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// step1: </span></div><div class="line"><span class="keyword">var</span> grd = context.createRadialGradient(x0, y0, r0, x1, y1, r1)</div><div class="line"><span class="comment">// x0 y0 r0 : 定义第一个圆的 x y 坐标 和 半径</span></div><div class="line"><span class="comment">// x1 y1 r1 : 定义第二个圆的 x y 坐标 和 半径</span></div><div class="line"></div><div class="line"><span class="comment">// step2: </span></div><div class="line">grd.addColorStop(stop, color)</div></pre></td></tr></table></figure></p>
<p>createPattern(img, repeat-style):<br>  img: new Image()<br>  repeat-style: no-repeat<br>                repeat-x<br>                repeat-y<br>                repeat</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[crypto-md5]]></title>
      <url>/2017/10/23/crypto-md5/</url>
      <content type="html"><![CDATA[<p>MD5(Message-Digest Algorithm) 是广泛使用的散列函数（又称哈希算法，摘要算法），主要用来确保消息的完整和一致性。常见的应用场景有密码保护、下载文件校验等。</p>
<p>特点：</p>
<ul>
<li>运算速度快。</li>
<li>输出长度固定（128位）。</li>
<li>运算不可逆。</li>
<li>高度离散：输入的微小变化，可导致输出结果的巨大差异。</li>
<li>弱碰撞性：不同输入的散列值可能相同。</li>
</ul>
<a id="more"></a>
<p>node:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</div><div class="line"><span class="keyword">const</span> md5 = crypto.createHash(<span class="string">'md5'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> result = md5.update(<span class="string">'abc'</span>).digest(<span class="string">'hex'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 900150983cd24fb0d6963f7d28e17f72</span></div></pre></td></tr></table></figure></p>
<p>(1) 密码直接加密：<br>容易暴力破解</p>
<p>(2) 密码加盐加密：<br>在密码特定位置加上特定的字符串，再MD5</p>
<p>(3) 密码随机加盐加密</p>
<p>MD5碰撞</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一些容易遗忘的快捷键]]></title>
      <url>/2017/10/20/%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E9%81%97%E5%BF%98%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>vscode:</p>
<ul>
<li>control + tab : tab切换</li>
<li>alt + up/down : 移动行 </li>
<li>alt + shift + up/down: (向上/下)复制行</li>
<li>alt + shift + f : 格式化文件</li>
<li>command + shift + e : 焦点到目录栏</li>
</ul>
<p>mac:</p>
<ul>
<li>command + alt + m + h : 最小化所有窗口</li>
<li>command + h : 隐藏当前窗口</li>
<li>command + m : 最小化当前窗口</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析PAC]]></title>
      <url>/2017/10/17/%E6%B5%85%E6%9E%90PAC/</url>
      <content type="html"><![CDATA[<p>Shadowsocks是目前很流行的翻墙工具，轻量等。<br>它提供两种模式：</p>
<ul>
<li>全局模式（不解释，你懂的）</li>
<li>PAC代理模式</li>
</ul>
<a id="more"></a>
<h4 id="什么是PAC"><a href="#什么是PAC" class="headerlink" title="什么是PAC"></a>什么是PAC</h4><p>自动代理配置(Proxy auto-config) 是一种网页浏览器技术，用于定义浏览器该如何自动选择适当的代理服务器来访问一个网址。<br>一个<code>PAC</code>文件包含一个<code>Javascript</code>形式的函数<code>FindProxyForURL(url, host)</code>。这个函数返回一个包含一个或多个访问规则的字符串。用户代理根据这些规则适用一个特定代理或直接访问。当一个代理服务器无法响应时，多个访问规则提供了其他的后备访问方法。<br>浏览器在访问页面以前，首先访问这个<code>PAC</code>文件。<code>PAC</code>文件中的<code>URL</code>可能是手工配置的，也可能是通过网页的网络代理自发协议自动配置的。<br><img src="http://oifogbmox.bkt.clouddn.com/171017-1.png" alt="images"><br>简单的讲，<code>PAC</code>就是一种配置，它能让你的浏览器智能判断哪些网站走代理，哪些不走代理。<br><img src="http://oifogbmox.bkt.clouddn.com/171017-2.png" alt="images"><br><img src="http://oifogbmox.bkt.clouddn.com/171017-3.png" alt="images"></p>
<h4 id="PAC的优势"><a href="#PAC的优势" class="headerlink" title="PAC的优势"></a>PAC的优势</h4><p>PAC自动代理属于智能判断模式，相比全局代理，它的优点有：</p>
<ul>
<li>不影响国内网站的访问速度，防止无意义的绕路</li>
<li>节省Shadowsocks服务的流量，节省服务器资源</li>
<li>控制方便</li>
</ul>
<h4 id="配置文件语法"><a href="#配置文件语法" class="headerlink" title="配置文件语法"></a>配置文件语法</h4><p>方式一：gfwlist.js文件 rule中添加。<br>方式二：user-rule.txt文件中添加。</p>
<p>自定义代理规则的设置语法与GFWlist相同，如下：</p>
<ul>
<li>通配符支持。比如<code>*.example.com/*</code>实际书写时可省略<code>*</code>， 如<code>.example.com/</code>，和<code>*.example.com/*</code>效果一样。</li>
<li>正则表达式支持。以<code>\</code>开始和结束，如<code>\[\w]+:\/\/example.com\</code>。</li>
<li>例外规则<code>@@</code>，如<code>@@*.example.com/*</code>满足<code>@@</code>后规则的地址不使用代理。</li>
<li>匹配地址开始和结尾<code>|</code>，如<code>|http://example.com</code>、<code>example.com|</code>分别表示以<code>http://example.com</code>开始和以<code>example.com</code>结束的地址。</li>
<li><code>||</code>标记，如<code>||example.com</code>则<code>http://example.com</code>、<code>https://example.com</code>、<code>ftp://example.com</code>等地址均满足条件。</li>
<li>注释<code>!</code>， 如<code>!我是注释</code>。</li>
</ul>
<blockquote>
<p>注意：如果改 user-rule.txt 文件，需要 ‘从GFWList更新PAC’</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[http]]></title>
      <url>/2017/10/15/http/</url>
      <content type="html"><![CDATA[<h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HTTP超文本传输协议，构建在TCP之上，属于应用层协议。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -v http://127.0.0.1:4001</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>http模块:<br>Node 的 http 模块包含对 HTTP 处理的封装。在 Node 中， HTTP 服务继承自 TCP 服务器（net 模块），它能够与多个客户端保持连接，由于其采用事件驱动的形式，并不为每一个连接创建额外的线程或进程，保持很低的内存占用，所以能实现高并发。HTTP 服务与 TCP 服务模型有区别的地方在于，在开启 keepalive 后，一个 TCP 会话可以用于多次请求和响应。TCP 服务以 connection 为单位进行服务，HTTP 服务以 request 为单位进行服务。http 模块即是将 connection 到 request 的过程进行了封装，如下：</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP & UDP]]></title>
      <url>/2017/10/14/TCP&amp;UDP/</url>
      <content type="html"><![CDATA[<p>Node 事件驱动、无阻塞、单线程<br>利用Node搭建网络服务器，不需要额外的容器（Apache,tomcat等）<br>Node 提供了 net、dgram、http、https 4个模块，分别用于处理 TCP、UDP、HTTP、HTTPS ，适用于服务端和客户端。</p>
<a id="more"></a>
<h4 id="构建-TCP-服务"><a href="#构建-TCP-服务" class="headerlink" title="构建 TCP 服务"></a>构建 TCP 服务</h4><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>TCP 全名为传输控制协议，在 OSI 模型中属于传输层协议。许多应用层协议基于 TCP 构建，典型的是 HTTP SMTP IMAP 协议。<br><img style="width: 350px" src="http://oifogbmox.bkt.clouddn.com/171014-1-OSI.png"><br>TCP 是面向连接的协议，其显著特征是在传输之前需要3次握手形成会话：<br><img style="width: 350px" src="http://oifogbmox.bkt.clouddn.com/171014-2-tcp.png"><br>只有会话形成之后，服务器和客户端之间才能互相发送数据。在创建会话的过程中，服务器端和客户端分别提供一个套接字，这两个套接字共同形成一个连接。服务器端与客户端则通过套接字实现两者之间连接的操作。</p>
<h4 id="创建TCP服务器端"><a href="#创建TCP服务器端" class="headerlink" title="创建TCP服务器端"></a>创建TCP服务器端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="comment">// 新的连接</span></div><div class="line">  socket.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    socket.write(<span class="string">'你好'</span>)</div><div class="line">  &#125;)</div><div class="line">  socket.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'连接断开'</span>)</div><div class="line">  &#125;)</div><div class="line">  socket.write(<span class="string">'欢迎你。。。'</span>)</div><div class="line">&#125;)</div><div class="line">server.listen(<span class="number">4003</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server bound'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>我们通过 net.createServer(listener) 即可创建一个 TCP 服务器，<code>listener</code>是连接事件<code>connection</code>的侦听器，也可以采用如下的方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = net.createServer()</div><div class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="comment">// 新的连接</span></div><div class="line">&#125;)</div><div class="line">server.listen(<span class="number">4003</span>)</div></pre></td></tr></table></figure></p>
<p>我们可以利用 Telnet 工具作为客户端对刚才创建的简单服务器进行会话交流，如下：<br><img src="http://oifogbmox.bkt.clouddn.com/171014-3.png" alt="images"></p>
<blockquote>
<p>telnet 退出：commond + ] quit</p>
</blockquote>
<p>通过 net 模块自行构造客户端进行会话，测试上面构建的 TCP 服务，如下：<br>client.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</div><div class="line"><span class="keyword">var</span> client = net.connect(&#123; <span class="attr">port</span>: <span class="number">4003</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 'connect' listener</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'client connected'</span>)</div><div class="line">  client.write(<span class="string">'world!\r\n'</span>)</div><div class="line">&#125;)</div><div class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data.toString())</div><div class="line">  client.end() <span class="comment">// 结束</span></div><div class="line">&#125;)</div><div class="line">client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'client disconnected'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Domain Socket ??</p>
<h4 id="TCP-服务的事件"><a href="#TCP-服务的事件" class="headerlink" title="TCP 服务的事件"></a>TCP 服务的事件</h4><p>(1) 服务器事件<br>对于通过 net.createServer() 创建的服务器而言，它是一个 EventEmitter 实例，它的自定义事件有以下几种：</p>
<ul>
<li>listening</li>
<li>connection: 每个客户端套接字连接到服务器端时触发。</li>
<li>close</li>
<li>error</li>
</ul>
<p>(2) 连接事件<br>服务器可以同时与多个客户端保持连接。</p>
<ul>
<li>data</li>
<li>end</li>
<li>connect</li>
<li>drain: 当任意一端调用 write()发送数据时，当前这端会触发该事件。</li>
<li>error</li>
<li>close</li>
<li>timeout: 当一定时间后连接不再活跃时，该事件将会被触发，通知用户当前该连接已经被闲置了。</li>
</ul>
<p>另外，由于 TCP 套接字是可读的 Stream 对象，可以利用 pipe() 方法巧妙地实现管道操作，如下代码实现一个 echo 服务器：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">  socket.write(<span class="string">'Echo server\r\n'</span>)</div><div class="line">  scoket.pipe(socket)</div><div class="line">&#125;)</div><div class="line">server.listen(<span class="number">4003</span>, <span class="string">'127.0.0.1'</span>)</div></pre></td></tr></table></figure></p>
<p>值得注意的是， 在Node中默认开启 Nagle 算法，只有当缓冲区的数据达到一定数量或者一定时间后才将其发出，以此来优化网络。这种优化虽然使网络带宽被有效地使用，但是数据有可能被延迟发送。</p>
<h3 id="构建UDP服务"><a href="#构建UDP服务" class="headerlink" title="构建UDP服务"></a>构建UDP服务</h3><div class="to-be-continued"></div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-cli相关]]></title>
      <url>/2017/10/13/vue-cli%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>wepack build之后会产生3个js文件：</p>
<ul>
<li>app.js 是入口js,具体业务代码（我们的src下的）</li>
<li>vendor.js 通过提取公共模块插件来提取的代码块（node_modules）</li>
<li>manifest.js 在vendor的基础上，再抽取出要经常变动的部分。</li>
</ul>
<blockquote>
<p>至于manifest的话，主要是一些异步加载的实现方法（通过建立script方式动态引入js），内容上包含异步js的文件名和路径。<br>主要是js的改动会改变异步加载里面的js文件名，频繁的变动，而相对来说vue库之类的代码，实际上只要编译打包一次就够了，如果只是打包成一个vendor的话，经常变动js会导致vendor重复编译，有点浪费，所以把会重复跟随变动的部分抽离出来作为manifest文件。</p>
</blockquote>
<p>以下是webpack.prod.js的配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">  name: <span class="string">'vendor'</span>,</div><div class="line">  minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module, count</span>) </span>&#123;</div><div class="line">    <span class="comment">// any required modules inside node_modules are extracted to vendor</span></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="built_in">module</span>.resource &amp;&amp;</div><div class="line">      /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</div><div class="line">      <span class="built_in">module</span>.resource.indexOf(</div><div class="line">        path.join(__dirname, <span class="string">'../node_modules'</span>)</div><div class="line">      ) === <span class="number">0</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;),</div><div class="line"><span class="comment">// extract webpack runtime and module manifest to its own file in order to</span></div><div class="line"><span class="comment">// prevent vendor hash from being updated whenever app bundle is updated</span></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">  name: <span class="string">'manifest'</span>,</div><div class="line">  chunks: [<span class="string">'vendor'</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>打包工具要解决的问题:</p>
<ul>
<li>文件依赖管理 梳理文件之间的依赖关系。</li>
<li>资源加载管理 处理文件的加载顺序（先后时机）和文件的加载数量（合并、嵌入、拆分）。</li>
<li>效率与优化管理 提高开发效率，完成页面优化。</li>
</ul>
<p>webpack是一个现代Javascript应用的打包工具。它采用tool+plugins的结构。tool提供基础能力，即文件依赖管理和资源加载管理；在此基础上通过一系列的plugins来丰富打包工具的功能。</p>
<p>在webpack里，所有的文件都是模块。但是webpack只认识js模块，所以要通过一些loader插件把css、图片等文件转化成webpack认识的模块。</p>
<p>在webpack打包的文件中，模块是以模块函数来表示的。通过把文件转化成模块函数就可以控制模块的运行时机。即加载完成后不会立即执行，等到调用模块函数的时候才会执行。</p>
<p>webpack的工作步骤如下：</p>
<ol>
<li>从入口文件开始递归地建立一个依赖关系图。</li>
<li>把所有文件都转化成模块函数。</li>
<li>根据依赖关系，按照配置文件把模块函数分组打包成若干个bundle。</li>
<li>通过script标签把打包的bundle注入到html中，通过manifest文件来管理bundle文件的运行和加载。</li>
</ol>
<p>打包的规则为：<br>一个入口文件对应一个bundle。该bundle包括入口文件模块和其依赖的模块。<br>按需加载的模块或需单独加载的模块则分开打包成其他的bundle。</p>
<p>除了这些bundle外，还有一个特别重要的bundle，就是manifest.bundle.js文件，即webpackBootstrap。这个manifest文件是最先加载的，负责解析webpack打包的其他bundle文件，使其按要求进行加载和执行。</p>
<h4 id="打包代码解析"><a href="#打包代码解析" class="headerlink" title="打包代码解析:"></a>打包代码解析:</h4><p>首先分析一下manifest文件:</p>
<p>(1) 三个主要变量，<code>modules</code>、<code>installedModules</code> 和 <code>installedChunks</code>。</p>
<p>modules对象保存的是所有的模块函数。模块函数是webpack处理的基本单位，对应打包前的一个文件，形式为<code>function(module, webpack_exports, webpack_require) {…}</code>。所有的模块函数的索引值是连续编码的，如果第一个bundle里的模块函数的索引是0-7，第二个bundle里的模块函数的索引就从8开始，从而保证索引和模块函数一一对应。</p>
<p>installedModules对象保存的是模块对象。模块对象是运行模块函数得到的对象，是标准的Commonjs对象，其属性主要有模块id和exports对象。webpack的运行就是指执行模块函数得到模块对象的过程。</p>
<p>installedChunks保存的是异步加载对象的promise信息，结构为[resolve, reject, promise]。主要是用来标记异步加载模块。用promise便于异步加载模块的全局管理，如果加载超时就可以抛出js异常。</p>
<p>(2) 三个主要函数<code>webpackJsonpCallback</code>，<code>webpack_require</code> 和 <code>webpack_require.e</code></p>
<p><code>webpackJsonpCallback(chunkIds, moreModules, executeModules){…}</code>是bundle文件的包裹函数。bundle文件被加载后就会运行这个函数。函数的三个参数分别对应三种模块。</p>
<ul>
<li>chunkIds指的是需要单独加载的模块的id，对应installedChunks；</li>
<li>moreModules包括该bundle打包的所有模块函数；</li>
<li>executeModules指的是需要立即执行的模块函数的id，对应modules，一般是入口文件对应的模块函数的id；<br>webpackJsonpCallback先把模块函数存到modules对象中；然后处理chunkIds，调用resolve来改变promise的状态；最后处理executeModules，把对应的模块函数转化成模块对象。</li>
</ul>
<p>webpack_require(moduleId)通过运行modules里的模块函数来得到模块对象，并保存到installedModules对象中。</p>
<p>webpack_require.e(chunkId)通过建立promise对象来跟踪按需加载模块的加载状态，并设置超时阙值，如果加载超时就抛出js异常。如果不需要处理加载超时异常的话，就不需要这个函数和installedChunks对象，可以把按需加载模块当作普通模块来处理。</p>
<p>manifest.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></div><div class="line">        <span class="comment">// modules存储的是模块函数</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// install a JSONP callback for chunk loading</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> parentJsonpFunction = <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>];</div><div class="line"><span class="comment">/******/</span> 	<span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] = <span class="function"><span class="keyword">function</span> <span class="title">webpackJsonpCallback</span>(<span class="params">chunkIds, moreModules, executeModules</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// add "moreModules" to the modules object,</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// then flag all "chunkIds" as loaded and fire callback</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, resolves = [], result;</div><div class="line">            <span class="comment">// 遍历chunkIds，如果对应的模块是按需加载的模块，就把其resolve函数存起来。</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">for</span>(;i &lt; chunkIds.length; i++) &#123;</div><div class="line"><span class="comment">/******/</span> 			chunkId = chunkIds[i];</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(installedChunks[chunkId]) &#123;</div><div class="line">              <span class="comment">// 是按需加载的模块，取出其resolve函数</span></div><div class="line"><span class="comment">/******/</span> 				resolves.push(installedChunks[chunkId][<span class="number">0</span>]);</div><div class="line"><span class="comment">/******/</span> 			&#125;</div><div class="line">              <span class="comment">// 该chunk已经被处理了</span></div><div class="line"><span class="comment">/******/</span> 			installedChunks[chunkId] = <span class="number">0</span>;</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line">            <span class="comment">// 遍历moreModules把模块函数存到modules中</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(moreModules, moduleId)) &#123;</div><div class="line"><span class="comment">/******/</span> 				modules[moduleId] = moreModules[moduleId];</div><div class="line"><span class="comment">/******/</span> 			&#125;</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);</div><div class="line">            <span class="comment">// 执行resolve函数，一般是__webpack_require__函数</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">while</span>(resolves.length) &#123;</div><div class="line"><span class="comment">/******/</span> 			resolves.shift()();</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line">            <span class="comment">// 遍历moreModules把模块函数转化成模块对象</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(executeModules) &#123;</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; executeModules.length; i++) &#123;</div><div class="line"><span class="comment">/******/</span> 				result = __webpack_require__(__webpack_require__.s = executeModules[i]);</div><div class="line"><span class="comment">/******/</span> 			&#125;</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> result;</div><div class="line"><span class="comment">/******/</span> 	&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The module cache</span></div><div class="line">          <span class="comment">// 存储的是模块对象</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> installedModules = &#123;&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// objects to store loaded and loading chunks</span></div><div class="line">          <span class="comment">// 按需加载的模块的promise</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> installedChunks = &#123;</div><div class="line"><span class="comment">/******/</span> 		<span class="number">2</span>: <span class="number">0</span></div><div class="line"><span class="comment">/******/</span> 	&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The require function</span></div><div class="line">          <span class="comment">// require的功能是把modules对象里的模块函数转化成模块对象，</span></div><div class="line">          <span class="comment">// 即运行模块函数，模块函数会把模块的export赋值给模块对象，供其他模块调用。</span></div><div class="line"><span class="comment">/******/</span> 	<span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Check if module is in cache</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(installedModules[moduleId]) &#123;</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> installedModules[moduleId].exports;</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line">            <span class="comment">// 下面开始把一个模块的代码转化成一个模块对象</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Create a new module (and put it into the cache)</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</div><div class="line"><span class="comment">/******/</span> 			i: moduleId,</div><div class="line"><span class="comment">/******/</span> 			l: <span class="literal">false</span>, <span class="comment">// 是否已经加载完成</span></div><div class="line"><span class="comment">/******/</span> 			exports: &#123;&#125; <span class="comment">// 模块输出，几乎代表模块本身</span></div><div class="line"><span class="comment">/******/</span> 		&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Execute the module function</span></div><div class="line">            <span class="comment">// 即运行模块函数，打包后的每个模块都是一个函数</span></div><div class="line"><span class="comment">/******/</span> 		modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Flag the module as loaded</span></div><div class="line"><span class="comment">/******/</span> 		<span class="built_in">module</span>.l = <span class="literal">true</span>;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Return the exports of the module</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line"><span class="comment">/******/</span> 	&#125;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// This file contains only the entry chunk.</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The chunk loading function for additional chunks</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.e = <span class="function"><span class="keyword">function</span> <span class="title">requireEnsure</span>(<span class="params">chunkId</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> installedChunkData = installedChunks[chunkId];</div><div class="line">            <span class="comment">// 模块已经被处理过（加载了模块函数并转换成了模块对象），就返回promise，调用resolve</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(installedChunkData === <span class="number">0</span>) &#123;</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123; resolve(); &#125;);</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// a Promise means "currently loading".</span></div><div class="line">            <span class="comment">// 模块正在被加载，返回原来的promise</span></div><div class="line">            <span class="comment">// 加载完后会运行模块函数，模块函数会调用resolve改变promise的状态</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(installedChunkData) &#123;</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> installedChunkData[<span class="number">2</span>];</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// setup Promise in chunk cache</span></div><div class="line">            <span class="comment">// 新建promise，并把resolve，reject函数和promise都赋值给installedChunks[chunkId]，以便全局访问</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span> 			installedChunkData = installedChunks[chunkId] = [resolve, reject];</div><div class="line"><span class="comment">/******/</span> 		&#125;);</div><div class="line"><span class="comment">/******/</span> 		installedChunkData[<span class="number">2</span>] = promise;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// start chunk loading</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line"><span class="comment">/******/</span> 		script.type = <span class="string">'text/javascript'</span>;</div><div class="line"><span class="comment">/******/</span> 		script.charset = <span class="string">'utf-8'</span>;</div><div class="line"><span class="comment">/******/</span> 		script.async = <span class="literal">true</span>;</div><div class="line"><span class="comment">/******/</span> 		script.timeout = <span class="number">120000</span>;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span> (__webpack_require__.nc) &#123;</div><div class="line"><span class="comment">/******/</span> 			script.setAttribute(<span class="string">"nonce"</span>, __webpack_require__.nc);</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line"><span class="comment">/******/</span> 		script.src = __webpack_require__.p + <span class="string">"static/js/"</span> + chunkId + <span class="string">"."</span> + &#123;<span class="string">"0"</span>:<span class="string">"f88d1711e34db78d2921"</span>,<span class="string">"1"</span>:<span class="string">"4fd48cb8f466e537b9fe"</span>&#125;[chunkId] + <span class="string">".js"</span>;</div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> timeout = setTimeout(onScriptComplete, <span class="number">120000</span>);</div><div class="line"><span class="comment">/******/</span> 		script.onerror = script.onload = onScriptComplete;</div><div class="line"><span class="comment">/******/</span> 		<span class="function"><span class="keyword">function</span> <span class="title">onScriptComplete</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span> 			<span class="comment">// avoid mem leaks in IE.</span></div><div class="line"><span class="comment">/******/</span> 			script.onerror = script.onload = <span class="literal">null</span>;</div><div class="line"><span class="comment">/******/</span> 			clearTimeout(timeout);</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">var</span> chunk = installedChunks[chunkId];</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">if</span>(chunk !== <span class="number">0</span>) &#123; <span class="comment">// 没有被处理</span></div><div class="line"><span class="comment">/******/</span> 				<span class="keyword">if</span>(chunk) &#123; <span class="comment">// 是按需加载模块，即请求超时了</span></div><div class="line"><span class="comment">/******/</span> 					chunk[<span class="number">1</span>](<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Loading chunk '</span> + chunkId + <span class="string">' failed.'</span>));</div><div class="line"><span class="comment">/******/</span> 				&#125;</div><div class="line"><span class="comment">/******/</span> 				installedChunks[chunkId] = <span class="literal">undefined</span>;</div><div class="line"><span class="comment">/******/</span> 			&#125;</div><div class="line"><span class="comment">/******/</span> 		&#125;;</div><div class="line"><span class="comment">/******/</span> 		head.appendChild(script);</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> promise;</div><div class="line"><span class="comment">/******/</span> 	&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the modules object (__webpack_modules__)</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.m = modules;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the module cache</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.c = installedModules;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// define getter function for harmony exports</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.d = <span class="function"><span class="keyword">function</span>(<span class="params">exports, name, getter</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(!__webpack_require__.o(exports, name)) &#123;</div><div class="line"><span class="comment">/******/</span> 			<span class="built_in">Object</span>.defineProperty(exports, name, &#123;</div><div class="line"><span class="comment">/******/</span> 				configurable: <span class="literal">false</span>,</div><div class="line"><span class="comment">/******/</span> 				enumerable: <span class="literal">true</span>,</div><div class="line"><span class="comment">/******/</span> 				get: getter</div><div class="line"><span class="comment">/******/</span> 			&#125;);</div><div class="line"><span class="comment">/******/</span> 		&#125;</div><div class="line"><span class="comment">/******/</span> 	&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.n = <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123;</div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ?</div><div class="line"><span class="comment">/******/</span> 			<span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">'default'</span>]; &#125; :</div><div class="line"><span class="comment">/******/</span> 			<span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>; &#125;;</div><div class="line"><span class="comment">/******/</span> 		__webpack_require__.d(getter, <span class="string">'a'</span>, getter);</div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> getter;</div><div class="line"><span class="comment">/******/</span> 	&#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// Object.prototype.hasOwnProperty.call</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.o = <span class="function"><span class="keyword">function</span>(<span class="params">object, property</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property); &#125;;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// __webpack_public_path__</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.p = <span class="string">"/"</span>;</div><div class="line"><span class="comment">/******/</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// on error function for async loading</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.oe = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="built_in">console</span>.error(err); <span class="keyword">throw</span> err; &#125;;</div><div class="line"><span class="comment">/******/</span> &#125;)</div><div class="line"><span class="comment">/************************************************************************/</span></div><div class="line"><span class="comment">/******/</span> ([]);</div><div class="line"><span class="comment">//# sourceMappingURL=manifest.439b74d2200fbac023c2.js.map</span></div></pre></td></tr></table></figure></p>
<p>然后分析普通的bundle文件:</p>
<p>所有的代码都包裹在webpackJsonp函数中。</p>
<p>函数的第二个参数是一个数组，包含了打包的所有文件对应的模块函数。<br>模块函数的标准形式为<code>function(module, webpack_exports, webpack_require) {…}</code>。<br>模块函数里的代码是打包前的文件的代码做了相应的替换得到的。<br>比如:替换<code>require</code>为<code>webpack_require</code>，替换以前的路径为新的路径，替换<code>import</code>为<code>webpack_require.e().then()</code>等。模块函数通过<code>webpack_exports[&#39;a&#39;] = printMe</code>之类的语句输出模块的<code>exports</code>。通过模块函数，把<code>amd</code>、<code>cmd</code>、<code>commjs</code>模块都统一为<code>webpack</code>的模块。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">webpackJsonp([<span class="number">0</span>],[</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line">    <span class="built_in">Object</span>.defineProperty(__webpack_exports__, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</div><div class="line">    <span class="comment">// 加载依赖模块</span></div><div class="line">    <span class="keyword">var</span> __WEBPACK_IMPORTED_MODULE_0__style_css__ = __webpack_require__(<span class="number">2</span>);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">var</span> __WEBPACK_IMPORTED_MODULE_1__katong_jpg___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__katong_jpg__);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">var</span> __WEBPACK_IMPORTED_MODULE_2__say_js__ = __webpack_require__(<span class="number">7</span>);</div><div class="line">    <span class="comment">// welcome.js文件里的代码</span></div><div class="line">    <span class="keyword">var</span> elDiv1 = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// 把原来的url替换成了上面加载的图片</span></div><div class="line">    elImg.src = __WEBPACK_IMPORTED_MODULE_1__katong_jpg___default.a;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// 把import替换成用promise实现的__webpack_require__.e()来完成异步按需加载</span></div><div class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        __webpack_require__.e(<span class="number">0</span>).then(__webpack_require__.bind(<span class="literal">null</span>, <span class="number">8</span>)).then(<span class="function"><span class="params">m</span> =&gt;</span> &#123;</div><div class="line">          m.default();</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 把原来的say()函数替换成上面加载的函数</span></div><div class="line">    <span class="built_in">Object</span>(__WEBPACK_IMPORTED_MODULE_2__say_js__[<span class="string">"a"</span>])();</div><div class="line">  &#125;),</div><div class="line">],[<span class="number">1</span>]);</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript入门]]></title>
      <url>/2017/10/12/TypeScript%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>TypeScript 的定位是做静态类型语言，而 Flow 的定位是类型检查器。<br>TypeScript 是 JavaScript 的超集，就是在 JavaScript 上做了一层封装，封装出 TypeScript 的特性，当然最终代码可以编译为 JavaScript。</p>
<p>demo.ts<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> num: <span class="built_in">number</span></div><div class="line">num = <span class="string">'linkFly'</span> <span class="comment">// 会报错</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> fetch = <span class="function"><span class="keyword">function</span>(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// fetch() 函数接收一个 string 类型的参数 url，返回一个 Promise。</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetch = <span class="function"><span class="keyword">function</span> (<span class="params">url: <span class="built_in">string</span> | object, params?: <span class="built_in">any</span>, user?: User</span>): <span class="title">Promise</span>&lt;<span class="title">object</span> | <span class="title">Error</span>&gt; </span>&#123;</div><div class="line">  <span class="comment">// dosomething</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> http(options).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> data</div><div class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> err</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个 TypeScript 包含了很多信息：</p>
<ol>
<li>url 可能是 string 或 object 类型</li>
<li>params 是可以不传的，也可以传递任何类型</li>
<li>user 要求是 User 类型的，当然也是可以不传</li>
<li>返回了一个 Promise，Promise 的求值结果可能是 object，也有可能是 Error</li>
</ol>
<p>看到上面的信息后，我们大概知道可以这么调用并处理 fetch 的返回结果：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> fetch(<span class="string">'https://tasaid.com'</span>, &#123; id: <span class="number">1</span> &#125;)</div><div class="line"></div><div class="line"><span class="comment">// fetch 可能会返回 Error</span></div><div class="line"><span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</div><div class="line">  <span class="comment">// 错误处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是静态数据类型的意义。静态类型在越复杂的应用中，需求越强烈。<br>这是 react 对于数据类型的约束：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></div><div class="line"></div><div class="line">component.propTypes = &#123;</div><div class="line">  optionalArray: PropTypes.array,</div><div class="line">  optionalBool: PropTypes.bool,</div><div class="line">  optionalFunc: PropTypes.func,</div><div class="line">  requiredFunc: PropTypes.func.isRequired,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是 vue 对于数据类型的约束：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'component'</span>, &#123;</div><div class="line">  props: &#123;</div><div class="line">    optionalArray: <span class="built_in">Array</span>,</div><div class="line">    optionalBool: <span class="built_in">Boolean</span>,</div><div class="line">    optionalFunc: <span class="built_in">Function</span>,</div><div class="line">    requiredFunc: &#123;</div><div class="line">      <span class="keyword">type</span>: <span class="built_in">Function</span>,</div><div class="line">      required: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>而引入了 TypeScript 之后，就会感受到真正流畅的数据类型约束：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Component &#123;</div><div class="line">  optionalArray?: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; <span class="comment">// string 类型的 数组</span></div><div class="line">  optionalBool?: <span class="built_in">boolean</span> <span class="comment">// 写上 ? 号，就表示着这个属性可能为空</span></div><div class="line">  optionalFunc?: <span class="function">(<span class="params">foo: <span class="built_in">string</span>, bar: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">boolean</span> <span class="comment">// 函数的参数，返回值都一目了然</span></div><div class="line">  requiredFunc: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>小tips：</p>
<ul>
<li>使用 visual studio code 编辑器会体验到 TypeScript 强大的类型推导，毕竟两个都是微软亲儿子。</li>
<li>一些 JavaScript 编写的大型的第三方库，都提供了 TypeScript 的类型声明文件（<code>*.d.ts</code> 文件）, 一般都放在包目录的 types 文件夹中。或者在 <code>@didi/*</code> 仓库名下可以找到。</li>
<li>babel 是将高级版本的 JavaScript 编译为目标版本的 JavaScript，TypeScript 是将 TypeScript 编译为目标版本的 JavaScript。它们的编译是重叠的，也就是说 TypeScript 可以不再依赖 babel 编译。</li>
</ul>
<h4 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a: <span class="built_in">number</span></div><div class="line"><span class="keyword">let</span> b = <span class="literal">true</span> <span class="comment">// 有默认值的情况，甚至不需要声明类型，ts 会自动推导</span></div><div class="line"><span class="keyword">let</span> c: [<span class="built_in">string</span>, <span class="built_in">number</span>] <span class="comment">// 元组</span></div><div class="line"><span class="keyword">enum</span> Color &#123; Red, Green, Blue &#125; <span class="comment">// 枚举</span></div><div class="line"><span class="keyword">let</span> d: &#123; name: <span class="built_in">String</span> &#125; = &#123; name: <span class="string">'Bob'</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// array</span></div><div class="line"><span class="keyword">let</span> list_a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">let</span> list_b: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// number 类型的数组</span></div><div class="line"><span class="keyword">let</span> list_c: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'Bob'</span>, <span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment">// any</span></div><div class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span></div><div class="line">notSure = <span class="literal">true</span> <span class="comment">// any 类型可以自由赋值</span></div><div class="line"></div><div class="line"><span class="comment">// 函数类型</span></div><div class="line"><span class="keyword">let</span> fn: <span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">id</span>) =&gt;</span> <span class="number">1</span></div><div class="line"><span class="comment">// 这里使用了 ECMAScript 6 的箭头函数，与下面的等价</span></div><div class="line"><span class="keyword">let</span> fn: <span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 联合类型，foo 是 string 或 number</span></div><div class="line"><span class="keyword">let</span> foo: <span class="built_in">string</span> | <span class="built_in">number</span></div><div class="line"></div><div class="line"><span class="comment">// 类型断言，强制使用兼容类型中的某一类型</span></div><div class="line">(foo <span class="keyword">as</span> <span class="built_in">string</span>)</div><div class="line"></div><div class="line"><span class="comment">// 类型保护（判断）</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> foo === <span class="string">'string'</span>) &#123;</div><div class="line">  <span class="comment">// dosomething</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 类型保护（判断）</span></div><div class="line"><span class="keyword">if</span> (foo <span class="keyword">instanceof</span> <span class="built_in">String</span>) &#123;</div><div class="line">  <span class="comment">// dosomething</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user: &#123; id: <span class="built_in">number</span>, name: <span class="built_in">string</span> &#125; = &#123; id: <span class="number">1</span>, name: <span class="string">'Bob'</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><p>所有类型的根本都是类。</p>
<blockquote>
<p>注意，TS 中类型是核心，当你想把一个项目从 JavaScript 迁移到 TypeScript 的时候，需要为项目中补充大量的类型，而这些类型大部分都是基于 Class 构建的。</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> User &#123;</div><div class="line">  id: <span class="built_in">number</span></div><div class="line">  name: <span class="built_in">string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> user: User = &#123; id: <span class="number">1</span>, name: <span class="string">'Bob'</span> &#125;</div></pre></td></tr></table></figure>
<p>更多细节：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> User &#123;</div><div class="line">  <span class="comment">// 只读属性</span></div><div class="line">  readonly id: <span class="built_in">number</span></div><div class="line"></div><div class="line">  <span class="comment">// 存取器，get/set</span></div><div class="line">  <span class="keyword">private</span> _name: <span class="built_in">string</span></div><div class="line">  <span class="keyword">get</span> name(): <span class="built_in">string</span> &#123;</div><div class="line">    <span class="comment">// dosomething</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'this is set method'</span>)</div><div class="line">    <span class="comment">// dosomething</span></div><div class="line">    <span class="keyword">this</span>._name = name</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 构造函数</span></div><div class="line">  <span class="keyword">constructor</span>(<span class="params">id: <span class="built_in">number</span>, theName: <span class="built_in">string</span></span>) &#123;</div><div class="line">    <span class="comment">// 只读属性只能在构造函数里初始化</span></div><div class="line">    <span class="keyword">this</span>.id = id</div><div class="line">    <span class="keyword">this</span>._name = theName</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 实例方法</span></div><div class="line">  say() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`name: <span class="subst">$&#123;this.name&#125;</span>`</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 静态方法</span></div><div class="line">  <span class="keyword">static</span> print() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'static method'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">'Bob'</span>)</div><div class="line">user.name = <span class="string">'aa'</span> <span class="comment">// =&gt; 'this is set method'</span></div><div class="line">user.say() <span class="comment">// =&gt; 'name: aa'</span></div><div class="line">User.print() <span class="comment">// =&gt; 'static method'</span></div></pre></td></tr></table></figure></p>
<h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>泛型是用来解决类型重用的问题。</p>
<p>以下只能传递 number 的参数并返回：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</div><div class="line">  <span class="comment">// dosomething</span></div><div class="line">  <span class="keyword">return</span> arg</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在想传递一个 string 类型的参数，然后也返回它，这个时候就可以使用范型，使用范型可以接收任意类型并返回：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这个 T 就是泛型，也可以叫其他名字</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</div><div class="line">  <span class="comment">// dosomething</span></div><div class="line">  <span class="keyword">return</span> arg</div><div class="line">&#125;</div><div class="line">identity&lt;<span class="built_in">string</span>&gt;(<span class="string">'Bob'</span>)</div><div class="line">identity(<span class="string">'Bob'</span>) <span class="comment">// 自动推导</span></div><div class="line">identity(<span class="number">0</span>)</div><div class="line">identity(<span class="literal">true</span>)</div></pre></td></tr></table></figure></p>
<p>我们可以轻松地使用泛型来实现数据包装：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="comment">// 远程请求数据并返回结果</span></div><div class="line">  <span class="keyword">return</span> http(url).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> data <span class="keyword">as</span> T</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> User &#123;</div><div class="line">  name: <span class="built_in">string</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 泛型使用</span></div><div class="line"><span class="keyword">let</span> user = fetch&lt;User&gt;(<span class="string">'http://xxx/api/user'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g typescript</div></pre></td></tr></table></figure>
<p><a href="https://tslang.cn/docs/handbook/decorators.html" target="_blank" rel="external">ts中文网</a><br><a href="http://tasaid.com/Blog/20171011232755.html" target="_blank" rel="external">资料</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[es6-class]]></title>
      <url>/2017/10/11/es6-class/</url>
      <content type="html"><![CDATA[<h4 id="class基本语法"><a href="#class基本语法" class="headerlink" title="class基本语法"></a>class基本语法</h4><h4 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">super</span>(x, y) <span class="comment">// 调用父类的 constructor(x, y)</span></div><div class="line">    <span class="keyword">this</span>.color = color</div><div class="line">  &#125;</div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString() <span class="comment">// 调用父类的 toString()</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的 super 表示 父类的构造函数，用来新建父类的 this 对象。<br>子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。这是因为子类没有自己的 this 对象，而是继承父类的 this 对象，然后对其进行加工。如果不调用 super 方法，子类就得不到 this 对象。</p>
<a id="more"></a>
<blockquote>
<p>ES5 的继承，实质是先创造子类的实例对象 this ，然后再将父类的方法添加到 this 上面 (<code>Parent.apply(this)</code>)。ES6 的继承机制完全不同，实质是先创造父类的实例对象 this (所以必须先调用<code>super</code>方法)，然后再用子类的构造函数修改<code>this</code>。</p>
</blockquote>
<p>Object.getPrototypeOf方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(ColorPoint) === Point <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>super关键字<br>既可以当作函数使用，也可以当作对象使用。<br>(1)super 作为函数调用时，代表父类的构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target.name) <span class="comment">// new.target 指向当前正在执行的函数</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> A() <span class="comment">// A</span></div><div class="line"><span class="keyword">new</span> B() <span class="comment">// B</span></div></pre></td></tr></table></figure></p>
<p>super 虽然代表了父类 A 的构造函数，但返回的是子类 B 的实例，即 super 内部的 this 指的是 B，因此 super() 在这里相当于 A.prototype.constructor.call(this)</p>
<blockquote>
<p>作为函数时，super() 只能在子类的 构造函数中使用。</p>
</blockquote>
<p>(2) super 作为对象时：</p>
<ul>
<li>在普通方法中，指向父类的原型对象。</li>
<li>在静态方法中，指向父类。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.p = <span class="number">2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">A.prototype.q = <span class="number">3</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  get m() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.p</div><div class="line">  &#125;</div><div class="line">  get n() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.q</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B()</div><div class="line">b.m <span class="comment">// undefined</span></div><div class="line">b.n <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>由于 super 指向父类的原型对象，所以定义在父实例上的方法或属性，是无法通过 super 调用到的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">2</span></div><div class="line">    <span class="keyword">super</span>.x = <span class="number">3</span> <span class="comment">// super就是this</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.x) <span class="comment">// =&gt; undefined  // 读取的是A.prototype.x</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) <span class="comment">// =&gt; 3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div></pre></td></tr></table></figure>
<p>prototype属性</p>
<ul>
<li>子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类。</li>
<li>子类prototype属性的<code>__proto__</code>属性，表示方法的继承，总是指向父类的prototype属性。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">B.__proto__ === A <span class="comment">// true //目的是为了继承静态属性和方法</span></div><div class="line">B.prototype.__proto__ === A.prototype <span class="comment">// true //可以理解为B的原型(B.prototype)指向A类的一个实例</span></div></pre></td></tr></table></figure>
<p>看下3种比较特殊的情况，其实都不难理解：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">A.__proto__ === <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">null</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">A.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></div><div class="line">A.prototype.__proto__ === <span class="literal">undefined</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<div class="to-be-continued"></div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[js对象]]></title>
      <url>/2017/10/10/js%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Bob'</span>, <span class="number">12</span>)</div></pre></td></tr></table></figure>
<p>new 方式创建对象过程：<br>(1) 创建一个新的对象。<br>(2) 将构造函数的作用域赋给新对象（因此<code>this</code>就指向了这个新对象）。<br>(3) 执行构造函数中的代码（为这个新对象添加属性）。<br>(4) 返回新对象。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实例的 constructor(构造函数) 属性指向 Person</span></div><div class="line">p1.constructor === Person <span class="comment">// true</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p1 <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line">p1 <span class="keyword">instanceof</span> Person <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>方法如果定义在构造函数上，那么每个实例都会有各自的方法，这其实是没有必要的，所以，方法一般都定义到原型上（共享）。</p>
<p>原型对象<br>每个函数都会有一个 prototype 属性，这个属性指向函数的原型对象。所有原型对象都会自动获得一个 constructor 属性，这个属性包含一个指向 prototype 属性所在函数的指针。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.prototype.isPrototypeOf(p1) <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>实例的<code>__proto__</code>属性指向原型对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回实例的 原型</span></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(p1) === Person.prototype</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实例 能直接访问到构造函数，其实是因为原型上存在初始的属性 constructor 指向构造函数</p>
</blockquote>
<p>hasOwnProperty() 方法可以检测一个属性是存在于实例还是原型（这个方法是从 Object 继承而来）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line">Person.prototpye.age = <span class="number">10</span></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</div><div class="line">p1.hasOwnProperty(<span class="string">'name'</span>) <span class="comment">// true 因为构造函数中是有name属性的</span></div><div class="line">p1.hasOwnProperty(<span class="string">'age'</span>) <span class="comment">// false</span></div><div class="line">p1.hasOwnProperty(<span class="string">'bb'</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>原型与 in 操作符</p>
<p>in 如果 实例 或者 原型中存在 就返回 true</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断 是不是原型中的属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span>(<span class="params">object, name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> !object.hasOwnProperty(name) &amp;&amp; (name <span class="keyword">in</span> object)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for - in 返回的是所有能够通过对象访问的，可枚举的属性，包括实例中的属性和原型中的属性。</p>
<p>Object.keys() 获取实例上所有可枚举的属性，只是实例哦，不包括原型上的属性。<br>Object.getOwnPropertyNames() 获取实例上所有属性（包括可枚举和不可枚举的），只是实例，不包括原型上的属性。</p>
<p>如下，我们将 Person.prototype 设置为等于一个以对象字面量形式创建的新对象，这样做唯一的影响是 constrcutor 属性不再指向 Person 了。</p>
<blockquote>
<p>每创建一个函数，就会同时创建它的 prototype 对象，这个对象也会自动获得 constructor 属性。而我们在这里直接重写了默认的 prototype 对象，因此 constructor 属性也就变成了新对象的 constructor 属性（指向 Object 的构造函数），不再指向 Person 函数了。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person()</div><div class="line">p <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line">p <span class="keyword">instanceof</span> Person <span class="comment">// true</span></div><div class="line">p.constructor === Person <span class="comment">// false</span></div><div class="line">p.constructor === <span class="built_in">Object</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>可以 强制 指定 <code>Person.prototype.constructor = Person</code> 这样的话 constructor 属性就是可枚举了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">"constructor"</span>, &#123;</div><div class="line">  enumerable: <span class="literal">false</span>,</div><div class="line">  value: Person</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我们可以随时为原型添加属性和方法，并且修改能够立即在所有对象实例中反映出来，但是，如果重写整个原型对象，那么情况就不一样了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>: Person,</div><div class="line">  name: 23,</div><div class="line">  sayName: function() &#123;</div><div class="line">    alert(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">p.sayName() <span class="comment">// error</span></div></pre></td></tr></table></figure></p>
<p>简单说 实例上的 [[Prototype]] 属性还是指向 最初创建实例时 的原型对象。</p>
<div class="to-be-continued"></div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-Render函数]]></title>
      <url>/2017/10/09/vue-Render%E5%87%BD%E6%95%B0/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器缓存]]></title>
      <url>/2017/10/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<p>缓存规则：</p>
<ul>
<li>添加 Expires 或 Cache-Control 到报文头中。</li>
<li>配置 ETags。</li>
<li>让 Ajax 可缓存。</li>
</ul>
<a id="more"></a>
<p>大多数缓存只应用在 GET 的请求行为上。<br><img src="http://oifogbmox.bkt.clouddn.com/171008-1.png" style="width: 500px;"></p>
<p>简单来讲，本地没有文件时，浏览器必然会请求服务器端的内容，并将这部分内容放置在本地的某个缓存目录中。在第二次请求时，它将对本地文件进行检查，如果不确定这份本地文件是否可以直接使用，它将会发起一次条件请求。所谓条件请求，就是在普通的 GET 请求报文中，附带 If-Modified-Since 字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">If-Modified-Since: Sun, 03 Feb 2013 06:01:12 GMT</div></pre></td></tr></table></figure></p>
<p>它将询问服务器端是否有更新的版本，本地文件的最后修改时间。如果服务器端没有新的版本，只需响应一个 304 状态码，客户端就使用本地版本。如果服务器端有新的版本，就将新的内容发送给客户端，客户端放弃本地版本。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="comment">// 服务器端根据请求 定位资源 filename</span></div><div class="line">  fs.stat(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, stat</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastModified = stat.mtime.toUTCString()</div><div class="line">    <span class="keyword">if</span> (lastModified === req.headers[<span class="string">'if-modified-since'</span>]) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>, <span class="string">"Not Modified"</span>) <span class="comment">// 返回304 内容没有修改</span></div><div class="line">      res.end() </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      fs.readFile(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, file</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> lastModified = stat.mtime.toUTCString()</div><div class="line">        res.setHeader(<span class="string">'Last-Modified'</span>, lastModified) <span class="comment">// 服务器端设置新的 Last-Modified</span></div><div class="line">        res.writeHead(<span class="number">200</span>, <span class="string">"ok"</span>)</div><div class="line">        res.end(file)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的条件请求采用时间戳的方式实现，但是时间戳存在一些缺陷：<br>(1) 文件的时间戳改动但内容并不一定改动。（比如版本回滚了）<br>(2) 时间戳只能精确到秒级别，更新频繁的内容将无法生效。<br>为此，HTTP1.1中引入了ETag（Entity Tag）来解决这个问题。由服务器端生成，服务器端可以决定它的生成规则。如果根据文件内容生成散列值，那么条件请求就不会受到时间戳改动造成的带宽浪费。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getHash = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> shasum = crypto.createHash(<span class="string">'sha1'</span>)</div><div class="line">  <span class="keyword">return</span> shasum.update(str).digest(<span class="string">'base64'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>与 If-Modified-Since/Last-Modified 不同的是，ETag 的请求和响应是 If-None-Match/ETag，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hash = getHash(file)</div><div class="line">    <span class="keyword">var</span> noneMatch = req.headers[<span class="string">'if-none-match'</span>]</div><div class="line">    <span class="keyword">if</span> (hash === noneMatch) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>, <span class="string">"Not Modified"</span>)</div><div class="line">      res.end()</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.setHeader(<span class="string">"ETag"</span>, hash)</div><div class="line">      res.writeHead(<span class="number">200</span>, <span class="string">"OK"</span>)</div><div class="line">      res.end(file)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>浏览器在收到 ETag: “83-34234000” 这样的响应之后，在下次的请求中，会将在请求头中带上 If-None-Match: “83-34234000” 。</p>
<hr>
<p>更进一步的缓存，浏览器本地缓存（不需要发http请求）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">    expires.setTime(expires.getTime() + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</div><div class="line">    res.setHeader(<span class="string">"Expires"</span>, expires.toUTCString())</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"OK"</span>)</div><div class="line">    res.end(file)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Expires 是一个 GMT 格式的时间字符串。浏览器在接到这个过期值后，只要本地还存在这个缓存文件，在到期时间之前它都不会再发起请求。如上设置了10年之后过期。 但是 Expires 的缺陷在于浏览器与服务器之间的时间可能不一致，这样一来可能会带来一些问题。<br>在这种情况下，Cache-Control 的方式如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, file</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"max-age="</span> + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"OK"</span>)</div><div class="line">    res.end(file)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Cache-Control 设置的是多久之后过期，除此之外，它还能设置 public 、private 、no-cache 、no-store 等能够更精细地控制缓存的选项。</p>
<blockquote>
<p>HTTP1.0还不支持 max-age。在同时设置 Expires 和 Cache-Control 的情况下， Cache-Control 的优先级高。</p>
</blockquote>
<p><strong>强制清除浏览器本地缓存</strong>：<br>浏览器是根据 URL 进行缓存的，那么一旦需要内容更新，我们就让浏览器发起新的 URL 请求，使得新内容能够被客户端更新。<br>也就是说，每次发布版本的时候 更新资源的版本号。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[es6-proxy]]></title>
      <url>/2017/10/06/es6-proxy/</url>
      <content type="html"><![CDATA[<p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种<code>元编程</code>，即对编程语言进行编程。</p>
<p>Proxy 可以理解成，在目标对象之前架设一层 <code>拦截</code>，外界对该对象进行访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 在这里可以译为<code>代理器</code>。<br><!--
receiver: 接收器
reflect: 反射
--><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</div><div class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, receiver</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;key&#125;</span>!`</span>)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver)</div><div class="line">  &#125;</div><div class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value, receiver</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;key&#125;</span>!`</span>)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">obj.count = <span class="number">1</span> <span class="comment">// =&gt; setting count!</span></div><div class="line">++obj.count</div><div class="line"><span class="comment">// =&gt; getting count!</span></div><div class="line"><span class="comment">// =&gt; setting count!</span></div><div class="line"><span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>上面代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。<br>Proxy 实际上重载（overload）了点运算符，即用自己的定义覆盖了语言的原始定义。</p>
<p>ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// target参数表示要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为。</span></div><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</div><div class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">target, property</span>) </span>&#123;</div><div class="line">    <span class="comment">// target: 目标对象 property: 对象属性</span></div><div class="line">    <span class="built_in">console</span>.log(target, property)</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">proxy.name <span class="comment">// =&gt; 1</span></div><div class="line">proxy.aa <span class="comment">// =&gt; 1</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handler = &#123;</div><div class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">target, name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (name === <span class="string">'prototype'</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.prototype</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + name</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  apply: <span class="function"><span class="keyword">function</span>(<span class="params">target, thisBinding, args</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> args[<span class="number">0</span>]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  construct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">1</span>] &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fproxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;, handler)</div><div class="line"></div><div class="line">fproxy(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// =&gt; 1 // 执行的是 apply</span></div><div class="line"><span class="keyword">new</span> fproxy(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// =&gt; &#123;value: 2&#125; // 执行的是 construct</span></div><div class="line">fproxy.prototype === <span class="built_in">Object</span>.prototype <span class="comment">// =&gt; true // get中设置了</span></div><div class="line">fproxy.foo === <span class="string">"Hello, foo"</span> <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure>
<p>对于可以设置，但没有设置拦截的操作，则直接落在目标对象上，按照原先的方式产生结果。</p>
<hr>
<p>Proxy 支持的拦截操作一览：</p>
<ul>
<li>get(target, propKey, receiver): 拦截对象属性的读取。</li>
<li>set(target, propKey, value, receiver): 拦截对象属性的设置。</li>
<li>has(target, propKey): 拦截 propKey in proxy 的操作，返回一个Boolean值。</li>
<li>deleteProperty(target, propKey): 拦截 delete proxy[propKey] 的操作，返回一个Boolean值。</li>
<li>ownKeys(target): 拦截 Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而 Object.keys() 的返回结果仅包括目标对象自身的可遍历属性。</li>
<li>getOwnPropertyDescriptor(target, propKey): 拦截 Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li>
<li>defineProperty(target, propKey, propDesc): 拦截 Object.defineProperty(proxy, propKey, propDesc)、Object.defineProperties(proxy, propDescs)，返回一个Boolean值。</li>
<li>preventExtensions(target): 拦截 Object.preventExtensions(proxy)，返回一个Boolean值。</li>
<li>getPrototypeOf(target): 拦截 Object.getPrototypeOf(proxy)，返回一个对象。</li>
<li>isExtensible(target): 拦截 Object.isExtensible(proxy)，返回一个布尔值。</li>
<li>setPrototypeOf(target, proto): 拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li>
<li>apply(target, object, args): 拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</li>
<li>construct(target, args): 拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">...elements</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> handler = &#123;</div><div class="line">    get(target, propKey, receiver) &#123;</div><div class="line">      <span class="keyword">let</span> index = <span class="built_in">Number</span>(propKey);</div><div class="line">      <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">        propKey = <span class="built_in">String</span>(target.length + index);</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">console</span>.log(target)</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, propKey, receiver);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> target = elements.slice(<span class="number">0</span>)</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> arr = createArray(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);</div><div class="line"><span class="built_in">console</span>.log(arr[<span class="number">-1</span>]) <span class="comment">// =&gt; 'c'</span></div></pre></td></tr></table></figure>
<p>利用 Proxy，可以将读取属性的操作（get），转变为执行某个函数，从而实现属性的链式操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pipe = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> funcStack = [];</div><div class="line">    <span class="keyword">var</span> oproxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125; , &#123;</div><div class="line">      get : <span class="function"><span class="keyword">function</span> (<span class="params">pipeObject, fnName</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fnName === <span class="string">'get'</span>) &#123;</div><div class="line">          <span class="built_in">console</span>.log(funcStack)</div><div class="line">          <span class="keyword">return</span> funcStack.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">val, fn</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> fn(val);</div><div class="line">          &#125;,value);</div><div class="line">        &#125;</div><div class="line">        funcStack.push(global[fnName]);</div><div class="line">        <span class="keyword">return</span> oproxy;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> oproxy;</div><div class="line">  &#125;</div><div class="line">&#125;());</div><div class="line"></div><div class="line">global.double = <span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>;</div><div class="line">global.pow    = <span class="function"><span class="params">n</span> =&gt;</span> n * n;</div><div class="line">global.reverseInt = <span class="function"><span class="params">n</span> =&gt;</span> n.toString().split(<span class="string">""</span>).reverse().join(<span class="string">""</span>) | <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(pipe(<span class="number">3</span>).double.pow.reverseInt.get) <span class="comment">// =&gt; 63</span></div></pre></td></tr></table></figure></p>
<p>具体实例看：<a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="external">doc</a></p>
<p><div class="to-be-continued1"></div><br><a id="more"></a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ArrayBuffer]]></title>
      <url>/2017/10/06/ArrayBuffer/</url>
      <content type="html"><![CDATA[<p>二进制数组由三类对象组成：<br>(1) <code>ArrayBuffer</code>对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。<br>(2) <code>TypedArray</code>视图：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节长度</th>
<th>含义</th>
<th>对应的C语言类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Int8</td>
<td>1</td>
<td>8位带符号整数</td>
<td>signed char</td>
</tr>
<tr>
<td>Uint8</td>
<td>1</td>
<td>8位不带符号整数</td>
<td>unsigned char</td>
</tr>
<tr>
<td>Uint8C</td>
<td>1</td>
<td>8位不带符号整数<br>（自动过滤溢出）</td>
<td>unsigned char</td>
</tr>
<tr>
<td>Int16</td>
<td>2</td>
<td>16位带符号整数</td>
<td>short</td>
</tr>
<tr>
<td>Uint16</td>
<td>2</td>
<td>16位不带符号整数</td>
<td>unsigned short</td>
</tr>
<tr>
<td>Int32</td>
<td>4</td>
<td>32位带符号整数</td>
<td>int</td>
</tr>
<tr>
<td>Uint32</td>
<td>4</td>
<td>32位不带符号的整数</td>
<td>unsigned int</td>
</tr>
<tr>
<td>Float32</td>
<td>4</td>
<td>32位浮点数</td>
<td>float</td>
</tr>
<tr>
<td>Float64</td>
<td>8</td>
<td>64位浮点数</td>
<td>double</td>
</tr>
</tbody>
</table>
<p>(3) <code>DataView</code>视图：可以自定义复合格式的视图，比如第一个字节是 Uint8（无符号8位整数）、第二、三个字节是 Int16（16位整数）、第四个字节开始是 Float32（32位浮点数）等等，此外还可以自定义字节序。</p>
<blockquote>
<p>TypedArray 视图支持的数据类型一共有9种（DataView视图支持除Uint8C以外的其他8种）</p>
</blockquote>
<h4 id="ArrayBuffer对象"><a href="#ArrayBuffer对象" class="headerlink" title="ArrayBuffer对象"></a><code>ArrayBuffer</code>对象</h4><p><code>ArrayBuffer</code>对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图(<code>TypedArray</code>视图和<code>DataView</code>视图)来读写，视图的作用是指定格式解读二进制数据。</p>
<p><code>ArrayBuffer</code>也是一个构造函数，可以分配一段可以存放数据的连续内存区域。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">32</span>) <span class="comment">// 生成一段32字节的内存区域，每个字节的默认都是0。</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf) <span class="comment">// 创建视图</span></div><div class="line">dataView.getUint8(<span class="number">0</span>) <span class="comment">// 以不带符号的8位整数格式，读取第一个元素，结果为0</span></div></pre></td></tr></table></figure></p>
<div class="to-be-continued"></div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[排序二叉树]]></title>
      <url>/2017/10/05/%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>特征：</p>
<ul>
<li>最多只有 左右 两个节点。</li>
<li>左子节点 &lt; 父节点 &lt; 右子节点。</li>
</ul>
<p><img src="http://oifogbmox.bkt.clouddn.com/171005-2.png" alt="images"></p>
<a id="more"></a>
<p>定义节点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.key = key</div><div class="line">  <span class="keyword">this</span>.left = <span class="literal">null</span></div><div class="line">  <span class="keyword">this</span>.right = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>定义排序二叉树：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> root = <span class="literal">null</span></div><div class="line">  <span class="comment">// 插入节点</span></div><div class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key)</div><div class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</div><div class="line">      root = newNode</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      insertNode(root, newNode)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 中序遍历 （左 中 右）</span></div><div class="line">  <span class="keyword">this</span>.inOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    inOrderTraverseNode(root, cb)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 前序遍历 （中 左 右）</span></div><div class="line">  <span class="keyword">this</span>.preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    preOrderTraverse(root, cb)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 后序遍历 （左 右 中）</span></div><div class="line">  <span class="keyword">this</span>.postOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    postOrderTraverse(root, cb)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取最小值</span></div><div class="line">  <span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> minNode(root).key</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 获取最大值</span></div><div class="line">  <span class="keyword">this</span>.max = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> maxNode(root).key</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 查找节点 是否存在 </span></div><div class="line">  <span class="comment">// @return &#123;Boolean&#125;</span></div><div class="line">  <span class="keyword">this</span>.search = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> searchNode(root, key)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 移除节点</span></div><div class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    root = removeNode(root, key)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>插入节点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, newNode</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (newNode.key &lt; node.key) &#123;</div><div class="line">    <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</div><div class="line">      node.left = newNode</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      insertNode(node.left, newNode)</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</div><div class="line">      node.right = newNode</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      insertNode(node.right, newNode)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>中序遍历：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">node, cb</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</div><div class="line">    cb(node.key)</div><div class="line">    preOrderTraverse(node.left, cb)</div><div class="line">    preOrderTraverse(node.right, cb)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前序遍历：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">node, cb</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</div><div class="line">    cb(node.key)</div><div class="line">    preOrderTraverse(node.left, cb)</div><div class="line">    preOrderTraverse(node.right, cb)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>后序遍历：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> postOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">node, cb</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</div><div class="line">    postOrderTraverse(node.left, cb)</div><div class="line">    postOrderTraverse(node.right, cb)</div><div class="line">    cb(node.key)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取最小值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> minNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (node) &#123;</div><div class="line">    <span class="keyword">while</span>(node &amp;&amp; node.left) &#123;</div><div class="line">      node = node.left</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> node</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取最大值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (node) &#123;</div><div class="line">    <span class="keyword">while</span>(node &amp;&amp; node.right) &#123;</div><div class="line">      node = node.right</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> node</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查找节点是否存在：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> searchNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!node) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (key &lt; node.key) &#123;</div><div class="line">    <span class="keyword">return</span> searchNode(node.left, key)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</div><div class="line">    <span class="keyword">return</span> searchNode(node.right, key)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>移除节点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> removeNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (key &lt; node.key) &#123;</div><div class="line">    node.left = removeNode(node.left, key)</div><div class="line">    <span class="keyword">return</span> node</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (key &gt; node.key) &#123;</div><div class="line">    node.right = removeNode(node.right, key)</div><div class="line">    <span class="keyword">return</span> node</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 以下为 key === node.key</span></div><div class="line">  <span class="comment">// 如果node是叶子节点</span></div><div class="line">  <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</div><div class="line">    <span class="comment">// node = null</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果只存在右节点</span></div><div class="line">  <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</div><div class="line">    node = node.right</div><div class="line">    <span class="keyword">return</span> node</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果只存在左节点</span></div><div class="line">  <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</div><div class="line">    node = node.left</div><div class="line">    <span class="keyword">return</span> node</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 同时存在左右节点 则</span></div><div class="line">  <span class="comment">// 1.找右子树的最小值（肯定大于删除节点的当前值）作为当前的key。</span></div><div class="line">  <span class="comment">// 2.删除右子树上的最小值。</span></div><div class="line">  <span class="keyword">if</span> (node.left &amp;&amp; node.right)&#123;</div><div class="line">    <span class="keyword">const</span> aux = minNode(node.right)</div><div class="line">    node.key = aux.key</div><div class="line">    node.right = removeNode(node.right, aux.key)</div><div class="line">    <span class="keyword">return</span> node</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>demo：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodes = [<span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>]</div><div class="line"><span class="keyword">var</span> binaryTree = <span class="keyword">new</span> BinaryTree()</div><div class="line"></div><div class="line">nodes.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">  binaryTree.insert(value)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 中序遍历</span></div><div class="line">binaryTree.inOrderTraverse(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(key)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 先序遍历</span></div><div class="line">binaryTree.preOrderTraverse(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(key)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 后序遍历</span></div><div class="line">binaryTree.postOrderTraverse(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(key)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[css变量]]></title>
      <url>/2017/10/04/css%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p><a href="https://color.adobe.com/zh/create/color-wheel/" target="_blank" rel="external">Adobe Color CC</a></p>
<p>基本用法：<br>声明一个变量：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">element</span>&#123;</div><div class="line">  <span class="attribute">--main-bg-color</span>: brown;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用变量：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">element</span>&#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>什么是<code>css</code>变量：<br>CSS 变量当前有两种形式：</p>
<p>变量，就是拥有合法标识符和合法的值。可以被使用在任意的地方。可以使用var()函数使用变量。例如：var(–example-variable)会返回–example-variable所对应的值。<br>自定义属性。这些属性使用–<em>where</em>的特殊格式作为名字。例如–example-variable: 20px;即使一个css声明语句。意思是将20px赋值给–example-varibale变量。</p>
<div class="to-be-continued"></div>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Dns & Render]]></title>
      <url>/2017/10/02/Dns-Render/</url>
      <content type="html"><![CDATA[<p>Dns 解析：<br><img src="http://oifogbmox.bkt.clouddn.com/171002-1dns.jpg" alt="images"></p>
<a id="more"></a>
<p>Html Render：<br><img src="http://oifogbmox.bkt.clouddn.com/171002-2render-html.png" alt="images"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[session]]></title>
      <url>/2017/10/02/session/</url>
      <content type="html"><![CDATA[<p>cookie 存在的问题：</p>
<ul>
<li>体积</li>
<li>前后端都可以修改</li>
</ul>
<p>session 数据只保留在服务器端，客户端无法修改，如何将每个客户和服务器中数据一一对应起来，有常见的两种实现方式：</p>
<a id="more"></a>
<h4 id="1-基于-cookie-来实现用户和数据的映射"><a href="#1-基于-cookie-来实现用户和数据的映射" class="headerlink" title="(1) 基于 cookie 来实现用户和数据的映射"></a>(1) 基于 cookie 来实现用户和数据的映射</h4><p>服务器端约定一个键值 作为 session 的口令，这个值可以随意约定。<br>一旦服务器检查到用户请求 cookie 中没有携带该值，它就会为之生成一个值，这个值是唯一且不重复的值，并设定超时时间。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sessions = &#123;&#125;</div><div class="line"><span class="keyword">var</span> key = <span class="string">'session_id'</span></div><div class="line"><span class="keyword">var</span> EXPIRES = <span class="number">20</span> * <span class="number">60</span> * <span class="number">1000</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> session = &#123;&#125;</div><div class="line">  session.id = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + <span class="built_in">Math</span>.random()</div><div class="line">  session.cookie = &#123;</div><div class="line">    expire: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</div><div class="line">  &#125;</div><div class="line">  sessions[session.id] = session</div><div class="line">  <span class="keyword">return</span> session</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每个请求到来时，检查 cookie 中的口令与服务器端的数据，如果过期，就重新生成。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key]</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate()</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id]</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">        <span class="comment">// 更新超时时间</span></div><div class="line">        session.cookie.expire = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</div><div class="line">        req.session = session</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 超时了，删除旧的数据，并重新生成</span></div><div class="line">        <span class="keyword">delete</span> sessions[id]</div><div class="line">        req.session = generate()</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  handle(req, res)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然仅仅重新生成 session 还不足以完成整个流程，还需要在响应给客户端时设置新的值，以便下次请求时能够对应服务器端的数据。这里我们 hack 响应对象 writeHead() 方法，在它内部注入设置 cookie 的逻辑，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>)</div><div class="line">  <span class="keyword">var</span> session = serialize(key, req.session.id)</div><div class="line">  <span class="comment">// Set-Cookie 字段 可能存在多条，所以 cookies 可能是个数组。</span></div><div class="line">  cookies = <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies, session]</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies)</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此， session 在前后端进行对应的过程就完成了。这样的业务逻辑可以判断和设置session，以此来维护用户与服务器端的关系，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.session.isVisit) &#123;</div><div class="line">    req.session.isVisit = <span class="literal">true</span></div><div class="line">    res.writeHead(<span class="number">200</span>)</div><div class="line">    res.end(<span class="string">'第一次访问'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>)</div><div class="line">    res.end(<span class="string">'再次访问'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样在 session 中保存的数据比直接在 cookie 中保存数据要安全的多。这种方式依赖 cookie 实现，而且也是目前大多数 Web 应用的方案。</p>
<h4 id="2-通过查询字符串来实现浏览器端和服务器端数据的对应"><a href="#2-通过查询字符串来实现浏览器端和服务器端数据的对应" class="headerlink" title="(2) 通过查询字符串来实现浏览器端和服务器端数据的对应"></a>(2) 通过查询字符串来实现浏览器端和服务器端数据的对应</h4><p>它的原理是检查请求的查询字符串，如果没有值，会先生成新的带值的 url<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getURL = <span class="function"><span class="keyword">function</span>(<span class="params">_url, key, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = url.parse(_url, <span class="literal">true</span>)</div><div class="line">  obj.query[key] = value</div><div class="line">  <span class="keyword">return</span> url.format(obj)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后形成跳转，让客户端重新发起请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> redirect = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">'Location'</span>, url)</div><div class="line">    res.writeHead(<span class="number">302</span>)</div><div class="line">    res.end()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> id = req.query[key]</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    <span class="keyword">var</span> session = generate()</div><div class="line">    redirect(getURL(req.url, key, session.id))</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id]</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">        <span class="comment">// 更新超时时间</span></div><div class="line">        session.cookie.expire = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</div><div class="line">        req.session = session</div><div class="line">        handle(req, res)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 超时了，删除旧的数据，并重新生成</span></div><div class="line">        <span class="keyword">delete</span> sessions[id]</div><div class="line">        <span class="keyword">var</span> session = generate()</div><div class="line">        redirect(getURL(req.url, key, session.id))</div><div class="line">      &#125;</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用户访问<code>http://localhost/pathname/</code>时，如果服务器端发现查询字符串中不带<code>session_id</code>参数，就会将用户跳转到 <code>http://localhost/pathname?session_id=12323</code>这样一个类似的地址。如果浏览器收到<code>302</code>状态码和<code>Location</code>报头，就会重新发起新的请求，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt; HTTP/1.1 302 Moved Temporarily</div><div class="line">&lt; Location: /pathname?session_id=12323</div></pre></td></tr></table></figure></p>
<p>这样，新的请求到来时就能通过<code>Session</code>的检查，除非内存中的数据过期。</p>
<p>当然 这种方式比 通过<code>Cookie</code>还不安全。</p>
<h4 id="Session与内存"><a href="#Session与内存" class="headerlink" title="Session与内存"></a>Session与内存</h4><p>可能的问题：<br>(1) 我们的<code>sessions</code>是存在内存中的，而<code>Node</code>中存在内存限制，用户一旦增多，数据量会过大，引起垃圾回收的频繁扫描，产生性能问题。<br>(2) 我们为了利用多核<code>CPU</code>而启动了多个进程，用户请求的连接将随意分配到各个进程中，<code>Node</code>的进程与进程之间是不能直接共享内存的，用户的<code>Session</code>可能会引起错乱。<br>通常的解决方案：<br>将<code>Session</code>集中化，将原本可能分散在多个进程里的数据，统一转移到集中的数据存储中。目前常用的工具是<code>Redis</code>、<code>Memcached</code>等，通过这些高效的缓存，<code>Node</code>进程无须在内部维护数据对象，垃圾回收问题和内存限制等问题都可以迎刃而解了。</p>
<p>采用第三方缓存来存储<code>Session</code>引起的一个问题是会引起网络访问。理论上来说访问网络中的数据要比访问磁盘中的数据速度要慢，因为涉及到握手、传输以及网络终端自身的磁盘I/O等，尽管如此但依然会采用这些高速缓存的理由有以下：</p>
<ul>
<li>Node 与缓存服务保持长连接，而非频繁的短连接，握手导致的延迟只影响初始化。</li>
<li>高速缓存直接在内存中进行数据存储和访问。</li>
<li>缓存服务通常与 Node 进程运行在相同的机器上或者相同的机房里，网络速度受到的影响较小。</li>
</ul>
<p>这样，Session 就需要通过异步的方式来获取了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key]</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate()</div><div class="line">    handle(req, res)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    store.get(id, <span class="function"><span class="keyword">function</span>(<span class="params">err, session</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (session) &#123;</div><div class="line">        <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">          <span class="comment">// 更新超时时间</span></div><div class="line">          session.cookie.expire = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</div><div class="line">          req.session = session</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 超时了，删除旧数据，重新生成session</span></div><div class="line">          <span class="keyword">delete</span> sessions[id]</div><div class="line">          req.session = generate()</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">        req.session = generate()</div><div class="line">      &#125;</div><div class="line">      handle(req, res)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在响应时，将新的<code>session</code>保存回缓存中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>) <span class="comment">// 暂存之前设置的cookie</span></div><div class="line">  <span class="keyword">var</span> session = serialize(key, req.session.id)</div><div class="line">  cookies = <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies, session]</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies)</div><div class="line"></div><div class="line">  <span class="comment">// 保存回缓存</span></div><div class="line">  store.save(req.session)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="session与安全"><a href="#session与安全" class="headerlink" title="session与安全"></a>session与安全</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将值通过私钥签名，由.分割原值和签名</span></div><div class="line"><span class="keyword">var</span> sign = <span class="function"><span class="keyword">function</span>(<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> val + <span class="string">'.'</span> + crypto</div><div class="line">    .createHmac(<span class="string">'sha256'</span>, secret)</div><div class="line">    .update(val)</div><div class="line">    .digest(<span class="string">'base64'</span>)</div><div class="line">    .replace(<span class="regexp">/\=+$/</span>, <span class="string">''</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在响应时，设置<code>session</code>值到<code>cookie</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> val = sign(req.sessionID, secret) <span class="comment">// secret 为定义了一个私钥</span></div><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, cookie.serialize(key, val))</div></pre></td></tr></table></figure></p>
<p>接收请求时，检查签名：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 取出口令部分进行签名，对比用户提交的值</span></div><div class="line"><span class="keyword">var</span> unsign = <span class="function"><span class="keyword">function</span>(<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = val.slice(<span class="number">0</span>, val.lastIndexOf(<span class="string">'.'</span>))</div><div class="line">  <span class="keyword">return</span> sign(val, secret) === val ? str : <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样一来，即使攻击者知道口令中<code>.</code>号前的值是服务端<code>session</code>的<code>ID</code>值，只要不知道<code>secret</code>私钥的值，就无法伪造签名信息，以此实现对<code>session</code>的保护。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git命令清单]]></title>
      <url>/2017/10/01/git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>git命令不常用的经常会忘，每次去查都很麻烦，刚好网上看到有别人整理的，感觉挺全，那就毫不客气的拿过来了，反正就自己看看(就是不要脸)。<br><img src="http://oifogbmox.bkt.clouddn.com/171001-1git.png" alt="images"><br>专业名称解释：</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<a id="more"></a>
<h3 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></div><div class="line">$ git init</div><div class="line"></div><div class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></div><div class="line">$ git init [project-name]</div><div class="line"></div><div class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></div><div class="line">$ git <span class="built_in">clone</span> [url]</div></pre></td></tr></table></figure>
<h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前的Git配置</span></div><div class="line">$ git config --list</div><div class="line"></div><div class="line"><span class="comment"># 编辑Git配置文件</span></div><div class="line">$ git config -e [--global]</div><div class="line"></div><div class="line"><span class="comment"># 设置提交代码时的用户信息</span></div><div class="line">$ git config [--global] user.name <span class="string">"[name]"</span></div><div class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></div></pre></td></tr></table></figure></p>
<h3 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加指定文件到暂存区</span></div><div class="line">$ git add [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></div><div class="line">$ git add .</div><div class="line"></div><div class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></div><div class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></div><div class="line">$ git add -p</div><div class="line"></div><div class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h3 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 提交暂存区到仓库区</span></div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class="line">$ git commit -a</div><div class="line"></div><div class="line"><span class="comment"># 提交时显示所有diff信息</span></div><div class="line">$ git commit -v</div><div class="line"></div><div class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></div><div class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
<h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有本地分支</span></div><div class="line">$ git branch</div><div class="line"></div><div class="line"><span class="comment"># 列出所有远程分支</span></div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"><span class="comment"># 列出所有本地分支和远程分支</span></div><div class="line">$ git branch -a</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向指定commit</span></div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换到上一个分支</span></div><div class="line">$ git checkout -</div><div class="line"></div><div class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 合并指定分支到当前分支</span></div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除分支</span></div><div class="line">$ git branch -d [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程分支</span></div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有tag</span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在当前commit</span></div><div class="line">$ git tag [tag]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在指定commit</span></div><div class="line">$ git tag [tag] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除本地tag</span></div><div class="line">$ git tag -d [tag]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程tag</span></div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"><span class="comment"># 查看tag信息</span></div><div class="line">$ git show [tag]</div><div class="line"></div><div class="line"><span class="comment"># 提交指定tag</span></div><div class="line">$ git push [remote] [tag]</div><div class="line"></div><div class="line"><span class="comment"># 提交所有tag</span></div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向某个tag</span></div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示有变更的文件</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的版本历史</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></div><div class="line"></div><div class="line"><span class="comment"># 搜索提交历史，根据关键词</span></div><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</div><div class="line"></div><div class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></div><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></div><div class="line">$ git <span class="built_in">log</span> -p [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示过去5次提交</span></div><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div><div class="line"></div><div class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"></div><div class="line"><span class="comment"># 显示今天你写了多少行代码</span></div><div class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交发生变化的文件</span></div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的最近几次提交</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载远程仓库的所有变动</span></div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"><span class="comment"># 显示所有远程仓库</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="comment"># 显示某个远程仓库的信息</span></div><div class="line">$ git remote show [remote]</div><div class="line"></div><div class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></div><div class="line">$ git remote add [shortname] [url]</div><div class="line"></div><div class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></div><div class="line">$ git pull [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></div><div class="line">$ git push [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line">$ git push [remote] --force</div><div class="line"></div><div class="line"><span class="comment"># 推送所有分支到远程仓库</span></div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class="line">$ git checkout [commit] [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class="line">$ git reset [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class="line">$ git reset --hard [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class="line">$ git reset --keep [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></div><div class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class="line">$ git revert [commit]</div><div class="line"></div><div class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></div><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<h3 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一个可供发布的压缩包</span></div><div class="line">$ git archive</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Promise 异步流程控制]]></title>
      <url>/2017/09/29/Promise-%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>问题：</p>
<blockquote>
<p>网页中预加载20张图片资源，分布加载，一次加载10张，两次完成，怎么控制图片请求的并发，怎么感知当前异步请求是否完成？</p>
</blockquote>
<p>html代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading"</span>&gt;</span>正在加载。。。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imgs"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="单一请求"><a href="#单一请求" class="headerlink" title="单一请求"></a>单一请求</h4><p>最简单的，就是将异步一个个来处理，转为一个类似同步的方式来处理。<br>先来简单的实现一个单个 Image 来加载的 thenable 函数和一个处理函数返回结果的函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> Image()</div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      resolve(img)</div><div class="line">    &#125;</div><div class="line">    img.onerror = reject</div><div class="line">    img.src = url</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>异步转同步的解决思路是：当第一个 <code>loadImg(urls[0])</code> 完成后再调用 <code>loadImg(urls[1])</code>，依次往下。</p>
<p>这里通过 Promise chain (其实就是一直then()下去)来实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve() <span class="comment">// 用一个中间变量来存储当前的 promise，就像链表的游标一样。</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; urls.length; i++) &#123;</div><div class="line">  promise = promise</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> loadImg(urls[i]))</div><div class="line">    .then(addToHtml)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>promise 变量就像一个迭代器，不断指向最新的放回的 Promise，进一步使用 reduce 来简化：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">urls.reduce(<span class="function">(<span class="params">promise, url</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> promise</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> loadImg(url))</div><div class="line">    .then(addToHtml)</div><div class="line">&#125;, <span class="built_in">Promise</span>.resolve())</div></pre></td></tr></table></figure></p>
<p>当然，我们也可以改成递归的形式来实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncLoad</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (index &gt;= urls.length) <span class="keyword">return</span></div><div class="line">  loadImg(urls[index])</div><div class="line">    .then(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// do something</span></div><div class="line">      addToHtml(img)</div><div class="line">      syncLoad(index + <span class="number">1</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 调用</span></div><div class="line">syncLoad(<span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>好了 一个简单的异步转同步的实现方式就已经完成了。但还需要在递归结束的时候，隐藏loading。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncLoad</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (index &gt;= urls.length) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</div><div class="line">  <span class="keyword">return</span> loadImg(urls[index])</div><div class="line">    .then(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</div><div class="line">      addToHtml(img)</div><div class="line">      <span class="keyword">return</span> syncLoad(index + <span class="number">1</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 调用</span></div><div class="line">syncLoad(<span class="number">0</span>)</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.loading'</span>).style.display = <span class="string">'none'</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p>现在我们再来完善一下这个函数，让它更加通用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @param &#123;Function&#125; fn 异步函数 - loadImg</span></div><div class="line"><span class="comment"> * @param &#123;Array&#125; arr 异步函数需要的参数 - urls</span></div><div class="line"><span class="comment"> * @param &#123;Function&#125; handler 异步函数的回调 - addToHtml</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncLoad</span>(<span class="params">fn, arr, handler</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">'第一个参数必须是函数'</span>)</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">'第二个参数必须是数组'</span>)</div><div class="line">  handler = <span class="keyword">typeof</span> handler === <span class="string">'function'</span> ? handler : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> errors = []</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt;= arr.length) &#123;</div><div class="line">      <span class="keyword">return</span> errors.length &gt; <span class="number">0</span> ? <span class="built_in">Promise</span>.reject(errors) : <span class="built_in">Promise</span>.resolve()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fn(arr[index])</div><div class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">        handler(data)</div><div class="line">      &#125;)</div><div class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(err)</div><div class="line">        errors.push(arr[index])</div><div class="line">        <span class="keyword">return</span> load(index + <span class="number">1</span>)</div><div class="line">      &#125;)</div><div class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> load(index + <span class="number">1</span>)</div><div class="line">      &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> load(<span class="number">0</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line">syncLoad(loadImg, urls, addToHtml)</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.loading'</span>).style.display = <span class="string">'none'</span></div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="built_in">console</span>.log)</div></pre></td></tr></table></figure></p>
<p>当然这种异步转同步的方式在这一个例子中并不是最好的做法，但当有何时的业务场景时，这是很常见的解决方案。</p>
<h4 id="并发请求"><a href="#并发请求" class="headerlink" title="并发请求"></a>并发请求</h4><p>使用 Promise.all</p>
<blockquote>
<p>Promise.all(iterable) 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promises = urls.map(loadImg)</div><div class="line"><span class="built_in">Promise</span>.all(promises)</div><div class="line">  .then(<span class="function"><span class="params">imgs</span> =&gt;</span> &#123;</div><div class="line">    imgs.forEach(addToHtml)</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.loading'</span>).style.display = <span class="string">'none'</span></div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.error(err, <span class="string">'Promise.all 当其中一个出现错误，就会reject。'</span>)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<h4 id="并发请求，按顺序处理结果"><a href="#并发请求，按顺序处理结果" class="headerlink" title="并发请求，按顺序处理结果"></a>并发请求，按顺序处理结果</h4><p>webapp 里常用的资源预加载，可能加载的是 20 张逐帧图片，当网络出现问题， 20 张图难免会有一两张请求失败，如果失败后，直接抛弃其他被 resolve 的返回结果，似乎有点不妥，我们只要知道哪些图片出错了，把出错的图片再做一次请求或着用占位图补上就好。<br>上节中的代码 <code>const promises = urls.map(loadImg)</code> 运行后，全部都图片请求都已经发出去了，我们只要按顺序挨个处理 promises 这个数组中的 Promise 实例就好了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promises = urls.map(loadImg)</div><div class="line"><span class="keyword">let</span> task = <span class="built_in">Promise</span>.resolve()</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</div><div class="line">  task = task.then(<span class="function"><span class="params">()</span> =&gt;</span> promises[i]).then(addToHtml)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>reduce 版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promises = urls.map(loadImg)</div><div class="line">promises.reduce(<span class="function">(<span class="params">task, imgPromise</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> task().then(<span class="function"><span class="params">()</span> =&gt;</span> imgPromise).then(addToHtml)</div><div class="line">&#125;, <span class="built_in">Promise</span>.resolve())</div></pre></td></tr></table></figure></p>
<h4 id="控制最大并发数"><a href="#控制最大并发数" class="headerlink" title="控制最大并发数"></a>控制最大并发数</h4><p>现在我们来试着完成一下上面的问题，这个其实都不需要控制最大并发数。<br>20张图，分两次加载，那用两个 Promise.all 不就解决了？但是用 Promise.all 没办法侦听到每一张图片加载完成的事件。而用上一节的方法，我们既能并发请求，又能按顺序响应图片加载完成的事件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> index = <span class="number">0</span></div><div class="line"><span class="keyword">const</span> step1 = [], step2 = []</div><div class="line"></div><div class="line"><span class="keyword">while</span>(index &lt; <span class="number">10</span>) &#123;</div><div class="line">  step1.push(loadImg(<span class="string">`./images/pic/<span class="subst">$&#123;index&#125;</span>.jpg`</span>))</div><div class="line">  index += <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">step1.reduce(<span class="function">(<span class="params">task, imgPromise, i</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> task</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> imgPromise)</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span> 张图片加载完成.`</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;, <span class="built_in">Promise</span>.resolve())</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; 前面10张已经加载完！'</span>)</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">while</span>(index &lt; <span class="number">20</span>) &#123;</div><div class="line">      step2.push(loadImg(<span class="string">`./images/pic/<span class="subst">$&#123;index&#125;</span>.jpg`</span>))</div><div class="line">      index += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> step2.reduce(<span class="function">(<span class="params">task, imgPromise, i</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> task</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> imgPromise)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;i + <span class="number">11</span>&#125;</span> 张图片加载完成.`</span>)</div><div class="line">        &#125;)</div><div class="line">    &#125;, <span class="built_in">Promise</span>.resolve())</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; 后面10张已经加载完'</span>)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p>抽象一下代码，写一个通用的方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepLoad</span> (<span class="params">urls, handler, stepNum</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> createPromises = <span class="function"><span class="keyword">function</span> (<span class="params">now, stepNum</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> last = <span class="built_in">Math</span>.min(stepNum + now, urls.length)</div><div class="line">    <span class="keyword">return</span> urls.slice(now, last).map(handler)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> step = <span class="built_in">Promise</span>.resolve()</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; urls.length; i += stepNum) &#123;</div><div class="line">    step = step</div><div class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> promises = createPromises(i, stepNum)</div><div class="line">        <span class="keyword">return</span> promises.reduce(<span class="function">(<span class="params">task, imgPromise, index</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">return</span> task</div><div class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> imgPromise)</div><div class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">              <span class="built_in">console</span>.log(<span class="string">`第 <span class="subst">$&#123;index + <span class="number">1</span> + i&#125;</span> 张图片加载完成.`</span>)</div><div class="line">            &#125;)</div><div class="line">        &#125;, <span class="built_in">Promise</span>.resolve())</div><div class="line">      &#125;)</div><div class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> current = <span class="built_in">Math</span>.min(i + stepNum, urls.length)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`&gt;&gt; 总共<span class="subst">$&#123;current&#125;</span>张已经加载完！`</span>)</div><div class="line">      &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> step</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但上面的实现和我们说的最大并发数控制没什么关系啊，最大并发数控制是指：当加载 20 张图片加载的时候，先并发请求 10 张图片，当一张图片加载完成后，又会继续发起一张图片的请求，让并发数保持在 10 个，直到需要加载的图片都全部发起请求。这个在写爬虫中可以说是比较常见的使用场景了。<br>实现方式：使用递归<br>假设我们的最大并发数是 4 ，这种方法的主要思想是相当于 4 个单一请求的 Promise 异步任务在同时运行运行，4 个单一请求不断递归取图片 URL 数组中的 URL 发起请求，直到 URL 全部取完，最后再使用 Promise.all 来处理最后还在请求中的异步任务，我们复用第二节递归版本的思路来实现这个功能：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">limitLoad</span> (<span class="params">urls, handler, limit</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> sequence = [].concat(urls) <span class="comment">// 对数组做一个拷贝</span></div><div class="line">  <span class="keyword">let</span> count = <span class="number">0</span></div><div class="line">  <span class="keyword">const</span> promises = []</div><div class="line"></div><div class="line">  <span class="keyword">const</span> load = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sequence.length &lt;= <span class="number">0</span> || count &gt; limit) <span class="keyword">return</span> </div><div class="line">    count += <span class="number">1</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`当前并发数: <span class="subst">$&#123;count&#125;</span>`</span>)</div><div class="line">    <span class="keyword">return</span> handler(sequence.shift())</div><div class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.error(err)</div><div class="line">      &#125;)</div><div class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        count -= <span class="number">1</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`当前并发数：<span class="subst">$&#123;count&#125;</span>`</span>)</div><div class="line">      &#125;)</div><div class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> load())</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; limit &amp;&amp; i &lt; sequence.length; i++)&#123;</div><div class="line">    promises.push(load())</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://juejin.im/post/59cdb6526fb9a00a4e67c7fb" target="_blank" rel="external">link</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Cookie]]></title>
      <url>/2017/09/29/Cookie/</url>
      <content type="html"><![CDATA[<p>http是无状态的协议。如何标识和认证一个用户，cookie应运而生。</p>
<p>Cookie 是由浏览器和服务器共同协作实现的规范，步骤如下：</p>
<ul>
<li>服务器向客户端发送 Cookie 。</li>
<li>浏览器将 Cookie 保存。</li>
<li>之后每次浏览器都会将 Cookie 发向服务器端。</li>
</ul>
<p>HTTP_Parser 会将所有的报文字段解析到 req.headers 上，那么 Cookie 就是 req.headers.cookie 。<br>根据规范的定义， Cookie 值的格式是 <code>key=value; key2=value</code> 形式的。解析如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> parseCookie = <span class="function"><span class="keyword">function</span> (<span class="params">cookie</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = &#123;&#125;</div><div class="line">  <span class="keyword">if</span> (!cookie) &#123;</div><div class="line">    <span class="keyword">return</span> cookies</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> list = cookie.split(<span class="string">';'</span>)</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> pair = list[i].split(<span class="string">'='</span>)</div><div class="line">    cookies[pair[<span class="number">0</span>].trim()] = pair[<span class="number">1</span>]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cookies</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在业务逻辑代码之前，我们将其挂载在 req 对象上，让业务代码可以直接访问，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  req.cookies = parseCookie(req.headers.cookie)</div><div class="line">  handle(req, res)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>服务端设置 Cookie</p>
<p>响应的 Cookie 值在 Set-Cookie 字段中。它的格式与请求中的格式不太一样，规范为<br><code>Set-Cookie: name=value; Path=/; Expires=Sun, 23-Apr-23 09:01:35 GMT; Domain=.domain.com;</code><br>其中 name=value 是必须包含的部分，其余皆可选。</p>
<ul>
<li>path 表示这个 Cookie 影响到的路径，当前访问的路径不满足该匹配时，浏览器则不发送这个Cookie。</li>
<li>Expires 和 Max-Age 是用来告知浏览器这个 Cookie 何时过期，如果不设置该选项，在关闭浏览器时会丢掉这个<br>Cookie 。如果设置了过期时间，浏览器将会把 Cookie 内容写入到磁盘中并保存，下次打开浏览器依旧有效。 Expires 的值是一个 UTC 格式的时间字符串，告知浏览器此 Cookie 何时将过期， Max-Age 则告知浏览器此 Cookie 多久后过期。前者一般而言不存在问题，但是如果服务器的时间和客户端的时间不能匹配，这种时间设置就会存在偏差。为此，Max-Age 告知浏览器这条 Cookie 多久之后过期，而不是一个具体的时间点。</li>
<li>HttpOnly 告知浏览器不允许通过脚本 document.cookie 去更改这个 Cookie 值，事实上，设置了 HttpOnly 之后，这个值在 document.cookie 中不可见。但是在 HTTP 请求的过程中， 依然会发送这个 Cookie 到服务器端。</li>
<li>Secure 当 Secure 值为 true 时，在 HTTP 中是无效的，在 HTTPS 中才有效，表示创建的 Cookie 只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证。</li>
</ul>
<p>将 Cookie 序列化成符合规范的字符串：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> serialize = <span class="function"><span class="keyword">function</span>(<span class="params">name, val, opt = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> pairs = [<span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;encode(val)&#125;</span>`</span>]</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (opt.maxAge) pairs.push(<span class="string">'Max-Age='</span> + opt.maxAge)</div><div class="line">  <span class="keyword">if</span> (opt.domain) pairs.push(<span class="string">'Domain='</span> + opt.domain)</div><div class="line">  <span class="keyword">if</span> (opt.path) pairs.push(<span class="string">'Path='</span> + opt.path)</div><div class="line">  <span class="keyword">if</span> (opt.expires) pairs.push(<span class="string">'Expires='</span> + opt.expires.toUTCString())</div><div class="line">  <span class="comment">// toUTCString格式： "Sat, 07 Oct 2017 14:22:16 GMT"</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (opt.httpOnly) pairs.push(<span class="string">'HttpOnly'</span>)</div><div class="line">  <span class="keyword">if</span> (opt.secure) pairs.push(<span class="string">'Secure'</span>)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> pairs.join(<span class="string">'; '</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.cookies.isVisit) &#123;</div><div class="line">    <span class="comment">// 设置 Set-Cookie</span></div><div class="line">    res.setHeader(<span class="string">'Set-Cookie'</span>, serialize(<span class="string">'isVisit'</span>, <span class="string">'1'</span>))</div><div class="line">    res.writeHead(<span class="number">200</span>)</div><div class="line">    res.end(<span class="string">'第一次访问'</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>)</div><div class="line">    res.end(<span class="string">'再次访问'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>客户端收到这个带 Set-Cookie 的响应后，在之后的请求时会在 Cookie 字段中带上这个值。</p>
<p>值得注意的是， Set-Cookie 在报头中是可能存在多个字段的。为此 res.setHeader 的第二个参数可以是一个数组，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, [serialize(<span class="string">'foo'</span>, <span class="string">'bar'</span>), serialize(<span class="string">'baz'</span>, <span class="string">'val'</span>)])</div><div class="line"><span class="comment">// 这会在报文头部中形成两条 Set-Cookie 字段：</span></div><div class="line"><span class="comment">// Set-Cookie: foo=bar; Path=/; Expires=Sun, 23-apr-23 09:01:35 GMT; Domain=.domain.com;</span></div><div class="line"><span class="comment">// Set-Cookie: baz=val; Path=/; Expires=Sun, 23-apr-23 09:01:35 GMT; Domain=.domain.com;</span></div></pre></td></tr></table></figure></p>
<p>Cookie 的性能影响</p>
<ul>
<li>减少 Cookie 大小</li>
<li>为静态资源使用不同的域名：减少无效 Cookie 的传输（静态资源一般不需要cookie中的标识信息）</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[log(winston)]]></title>
      <url>/2017/09/28/log-winston/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/winstonjs/winston" target="_blank" rel="external">github-winston</a></p>
<a id="more"></a>
<p>文档其实感觉没看太懂，先不管了，反正就这么用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 'test' 其实就是个命名空间了 </span></div><div class="line">winston.loggers.add(<span class="string">'test'</span>, &#123;</div><div class="line">  <span class="built_in">console</span>: &#123;</div><div class="line">    level: <span class="string">'silly'</span>, <span class="comment">// &#123; error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 &#125;</span></div><div class="line">    colorize: <span class="literal">true</span>, <span class="comment">// true 上颜色</span></div><div class="line">    label: <span class="string">'test...'</span>, <span class="comment">// 前缀(一般写模块名吧)</span></div><div class="line">  &#125;,</div><div class="line">  file: &#123;</div><div class="line">    filename: <span class="string">'somefile.log'</span> <span class="comment">// log的输出文件</span></div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> logger = winston.loggers.get(<span class="string">'test'</span>)</div><div class="line"></div><div class="line">logger.error(<span class="string">`error`</span>)</div><div class="line">logger.warn(<span class="string">`warn`</span>)</div><div class="line">logger.info(<span class="string">`info`</span>)</div><div class="line">logger.verbose(<span class="string">`verbose`</span>)</div><div class="line">logger.debug(<span class="string">'debug'</span>)</div><div class="line">logger.silly(<span class="string">'silly'</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://oifogbmox.bkt.clouddn.com/170928-1.png" alt="images"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[axios]]></title>
      <url>/2017/09/27/axios/</url>
      <content type="html"><![CDATA[<p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端。<br>具备以下特征：</p>
<ul>
<li>从浏览器中创建 XMLHttpRequest</li>
<li>从 node.js 发出 http 请求</li>
<li>支持 Promise API</li>
<li>拦截请求和响应</li>
<li>转换请求和响应数据</li>
<li>取消请求</li>
<li>自动转换JSON数据</li>
<li>客户端支持防止 CSRF/XSRF</li>
</ul>
<a id="more"></a>
<hr>
<p>直接看几个例子吧<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// get</span></div><div class="line"></div><div class="line">axios.get(<span class="string">'/api/aa?id=12345'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something...</span></div><div class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something...</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">axios.get(<span class="string">'/api/aa'</span>, &#123;</div><div class="line">  params: &#123;</div><div class="line">    id: <span class="number">12345</span>,</div><div class="line">  &#125;</div><div class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something...</span></div><div class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something...</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// post</span></div><div class="line">axios.post(<span class="string">'/usr'</span>, &#123;</div><div class="line">  name: <span class="string">'bb'</span>,</div><div class="line">  age: <span class="number">10</span></div><div class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something...</span></div><div class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something...</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 多个请求并发</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataA</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/api/aa'</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataB</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/api/bb'</span>)</div><div class="line">&#125;</div><div class="line">axios.all([getDataA(), getDataB()]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something...</span></div><div class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>返回数据：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">'url'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  res.data <span class="comment">// 数据</span></div><div class="line">  res.status <span class="comment">// 200</span></div><div class="line">  res.statusText <span class="comment">// OK</span></div><div class="line">  res.headers <span class="comment">// response头</span></div><div class="line">  res.config <span class="comment">// 配置</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>拦截器：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 全局添加请求拦截器</span></div><div class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;&#125;</div><div class="line">  <span class="comment">// 在发送请求之前 do something</span></div><div class="line">  <span class="keyword">return</span> config</div><div class="line">&#125;,(err) =&gt; &#123;</div><div class="line">  <span class="comment">// 请求错误时 do something</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="comment">// 全局添加响应拦截器</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 对响应数据 do something</span></div><div class="line">  <span class="keyword">return</span> res</div><div class="line">&#125;, (error) =&gt; &#123;</div><div class="line">  <span class="comment">//请求错误时 do something</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 删除拦截器</span></div><div class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;)</div><div class="line">axios.interceptors.request.eject(myInterceptor)</div><div class="line"></div><div class="line"><span class="comment">// 自定义 axios 实例 添加拦截器</span></div><div class="line"><span class="keyword">const</span> instance = axios.create()</div><div class="line">instance.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[flex]]></title>
      <url>/2017/09/26/flex/</url>
      <content type="html"><![CDATA[<p>flex: 弹性布局<br>display: flex | inline-flex</p>
<h4 id="容器属性："><a href="#容器属性：" class="headerlink" title="容器属性："></a>容器属性：</h4><p>(1) flex-direction<br>决定主轴的方向(即项目的排列方向)。</p>
<ul>
<li>row(默认值): 主轴为水平方向，起点在左端。</li>
<li>row-reverse: 主轴为水平方向，起点在右端。</li>
<li>column: 主轴在垂直方向，起点在上沿。</li>
<li>column-reverse: 主轴在垂直方向，起点在下沿。</li>
</ul>
<p>(2) flex-wrap<br>默认情况下，项目都排在一条轴线上，如果一条轴线上显示不下，如何排列。</p>
<ul>
<li>nowrap(默认): 不换行(所有的压缩挤在一行)。</li>
<li>wrap: 换行，第一行在上方。</li>
<li>wrap-reverse: 换行，第一行在下方。</li>
</ul>
<p>(3) flex-flow<br>为 flex-direction 和 flex-wrap 的简写形式，没什么好说的。</p>
<p>(4) <strong>justify-content</strong><br>项目在<strong>主轴</strong>上的对齐形式。</p>
<ul>
<li>flex-start(默认值): 左对齐(靠左)。</li>
<li>flex-end: 右对齐(靠右)。</li>
<li>center: 居中。</li>
<li>space-between: 两端对齐，项目之间的间距都相等。</li>
<li>space-around: 每个项目两侧的间距都相等。所以项目之间的间距是项目和边框的间距的两倍。<br><img src="http://oifogbmox.bkt.clouddn.com/170926-1.png" style="height: 350px"></li>
</ul>
<p>(5) <strong>align-items</strong><br>项目在<strong>交叉轴</strong>上的对齐形式。</p>
<ul>
<li>flex-start: 交叉轴的起点对齐。</li>
<li>flex-end: 交叉轴的终点对齐。</li>
<li>center: 交叉轴的中点对齐。</li>
<li>stretch(默认值)(伸展): 如果项目未设置高度或为auto，将占满整个容器的高度。</li>
<li>baseline: 文字的基线对齐。<br><img src="http://oifogbmox.bkt.clouddn.com/170926-2.png" style="height: 350px"></li>
</ul>
<p>(6) align-context<br>定义了多根轴线的对齐方式，如果只有一根，则不起作用。</p>
<ul>
<li>flex-start: 与交叉轴的起点对齐。</li>
<li>flex-end: 与交叉轴的终点对齐。</li>
<li>center: 与交叉轴的中点对齐。</li>
<li>space-between: 与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around: 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值): 轴线占满整个交叉轴。<br><img src="http://oifogbmox.bkt.clouddn.com/170926-3.png" style="height: 350px"></li>
</ul>
<h4 id="项目属性："><a href="#项目属性：" class="headerlink" title="项目属性："></a>项目属性：</h4><p>(1) order<br>定义项目的排列顺序，数值越小，排列越靠前，默认为0。</p>
<p>(2) flex-grow<br>定义项目的放大比例，默认为0，即存在剩余空间，也不放大。</p>
<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。<br>如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<p>(3) flex-shrink<br>定义了项目的缩小比例，默认为1，即如果空间不足，该项目缩小。<br>为0时，不缩小。</p>
<p>(4) flex-basis<br>定义了项目占据的主轴的空间，默认值为auto，即项目的本来大小。（如100px）</p>
<p>(5) flex<br>为flex-grow, flex-shrink 和 flex-basis的缩写。</p>
<p>(6) align-self<br>具体某个项目的 align-items(交叉轴上的对齐方式)。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-SSR]]></title>
      <url>/2017/09/25/vue-SSR/</url>
      <content type="html"><![CDATA[<p><a href="https://ssr.vuejs.org/zh/" target="_blank" rel="external">官方文档</a></p>
<h2 id="Why-SSR"><a href="#Why-SSR" class="headerlink" title="Why SSR"></a>Why SSR</h2><ul>
<li>SEO</li>
<li>更快内容到达(time-to-content)</li>
</ul>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>simple demo:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i vue vue-server-renderer koa -S</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>server.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</div><div class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</div><div class="line"><span class="keyword">const</span> &#123; createRenderer &#125; = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>)</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</div><div class="line"><span class="keyword">const</span> createApp = <span class="built_in">require</span>(<span class="string">'./app'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> indexRenderer = createRenderer(&#123;</div><div class="line">  template: <span class="built_in">require</span>(<span class="string">'fs'</span>).readFileSync(<span class="string">'./index.template.html'</span>, <span class="string">'utf-8'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use( <span class="keyword">async</span> (ctx) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> context = &#123;</div><div class="line">    url: ctx.req.url,</div><div class="line">    title: <span class="string">'hello'</span>,</div><div class="line">    meta: <span class="string">`&lt;meta charset="utf-8"&gt;`</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> app = createApp(context) <span class="comment">// 获取 Vue 实例</span></div><div class="line"></div><div class="line">  <span class="comment">// 把 vue 实例 转成 html 并注入到 renderer 的模板中</span></div><div class="line">  indexRenderer.renderToString(app, context, (err, html) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      ctx.res.status = <span class="number">500</span></div><div class="line">      ctx.res.body = <span class="string">'500了'</span></div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    ctx.body = html</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"open http://localhost:3000"</span>)</div></pre></td></tr></table></figure></p>
<p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">context</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(&#123;</div><div class="line">    data: &#123;</div><div class="line">      url: context.url</div><div class="line">    &#125;,</div><div class="line">    template: <span class="string">`&lt;div&gt;</span></div><div class="line"><span class="string">                &lt;div&gt;我是 vue 实例中的内容&lt;/div&gt;</span></div><div class="line"><span class="string">                &lt;div&gt;访问的 url 是： &#123;&#123; url &#125;&#125;&lt;/div&gt;</span></div><div class="line"><span class="string">              &lt;/div&gt;`</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>index.template.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span></div><div class="line">  &#123;&#123;&#123; meta &#125;&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 renderer 的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 以下为template插入的注释标识 （注意 前后没空格） --&gt;</span></div><div class="line">  <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oifogbmox.bkt.clouddn.com/170930-1.png" alt="images"></p>
<p><img src="http://oifogbmox.bkt.clouddn.com/171002-3ssr-webpack.png" alt="images"></p>
<div class="to-be-continue"></div>

]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Set]]></title>
      <url>/2017/09/25/Set/</url>
      <content type="html"><![CDATA[<p>类似于数组，但成员的值都是唯一的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"></div><div class="line">s.add(<span class="number">2</span>)</div><div class="line">s.size()</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1 2 3</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Set中的重复判断 类似于<code>===</code>，但<code>NaN</code>除外</p>
</blockquote>
<a id="more"></a>
<p>属性：</p>
<ul>
<li><code>Set.prototype.constructor</code>: 构造函数</li>
<li><code>Set.prototype.size</code>: 返回<code>Set</code>实例的成员总数</li>
</ul>
<p>方法：</p>
<ul>
<li><code>add(value)</code>: 添加某个值，返回<code>Set</code>结构本身</li>
<li><code>delete(value)</code>: 删除某个值，返回一个布尔值，表示删除是否成功</li>
<li><code>has(value)</code>: 返回一个布尔值，标识该值是否为<code>Set</code>成员</li>
<li><code>clear()</code>: 清除所有成员，没有返回值</li>
</ul>
<p><code>Array.form</code>方法可以将<code>Set</code>结构转为数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(items)</div></pre></td></tr></table></figure></p>
<p>遍历：</p>
<ul>
<li><code>keys()</code>: 返回键名的遍历器</li>
<li><code>values()</code>: 返回键值的遍历器</li>
<li><code>entries()</code>: 返回键值对的遍历器</li>
<li><code>forEach()</code>: 遍历回调</li>
</ul>
<blockquote>
<p><code>Set</code>的遍历顺序就是插入顺序。<br>由于<code>Set</code>结构没有键名，只有键值，所以<code>keys</code>方法和<code>values</code>方法的行为完全一致。</p>
</blockquote>
<p><code>Set</code>结构的实例默认可遍历，它的默认遍历器生成函数就是它的<code>values</code>方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Set</span>.prototype[<span class="built_in">Symbol</span>.iterator] === <span class="built_in">Set</span>.prototype.values</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>扩展运算符<code>...</code>内部使用<code>for...of</code>循环，所以也可以用于<code>Set</code>结构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'red'</span>, <span class="string">'green'</span>])</div><div class="line"><span class="keyword">let</span> arr = [...set]</div><div class="line"><span class="comment">// ['red', 'green']</span></div></pre></td></tr></table></figure></p>
<p>目前没有直接的办法可以改变原来的<code>Set</code>结构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法一</span></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].map(<span class="function"><span class="params">val</span> =&gt;</span> val * <span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="comment">// 方法二</span></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">Array</span>.from(set, val =&gt; val * <span class="number">2</span>))</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Nightmare(feature testing)]]></title>
      <url>/2017/09/22/nightmare-feature-testing/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/weitongtong/test-demo/tree/master/nightmare-demo" target="_blank" rel="external">nightmare-demo</a></p>
<p>feature testing: 功能测试</p>
<p>(1) 安装 <code>nightmare</code>  <code>mocha</code>  <code>chai</code> <code>http-server</code><br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 Electron</span></div><div class="line">$ env ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ npm install</div><div class="line">$ npm i nightmare mocha chai -D</div><div class="line">$ npm i http-server -D</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，Nightmare 会先安装 Electron，而 Electron 的安装需要下载境外的包，有时会连不上，导致安装失败。所以，这里先设置了环境变量，指定使用国内的 Electron 源，然后才执行安装命令。</p>
</blockquote>
<p>(2) 查看需要测试的功能页面<br>  index.html<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#demo</span>&#123;</span></div><div class="line"><span class="undefined">      color: red;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#demo'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.textContent = <span class="string">'hello wtt'</span></span></div><div class="line"><span class="javascript">      <span class="keyword">this</span>.style.color = <span class="string">'blue'</span></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>  server.js<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> httpServer = <span class="built_in">require</span>(<span class="string">'http-server'</span>)</div><div class="line"><span class="keyword">const</span> server = httpServer.createServer()</div><div class="line"></div><div class="line">server.listen(<span class="number">8888</span>)</div><div class="line"></div><div class="line"><span class="comment">// If Node.js is spawned with an IPC channel, the process.send() method can be used to send messages to the parent process. Messages will be received as a 'message' event on the parent's ChildProcess object.</span></div><div class="line"><span class="comment">// If Node.js was not spawned with an IPC channel, process.send() will be undefined.</span></div><div class="line"><span class="keyword">if</span> (process.send) &#123;</div><div class="line">  process.send(<span class="string">'listening'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  (3) 编写测试脚本 test.js<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>)</div><div class="line"><span class="keyword">const</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect</div><div class="line"><span class="keyword">const</span> fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork</div><div class="line"></div><div class="line">describe(<span class="string">'test index.html'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> child</div><div class="line"></div><div class="line">  <span class="comment">// 测试开始前执行</span></div><div class="line">  before(<span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 新建了一个子进程来启动 HTTP 服务器</span></div><div class="line">    child = fork(<span class="string">'server.js'</span>)</div><div class="line">    child.on(<span class="string">'message'</span>, (msg) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (msg === <span class="string">'listening'</span>) &#123;</div><div class="line">        <span class="comment">// done 是 mocha 提供的一个函数，用来表示异步操作完成。</span></div><div class="line">        <span class="comment">// 如果不调用 done，mocha 就会认为异步操作没有结束，不会往下执行，从而导致超时错误。</span></div><div class="line">        done()</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="comment">// 测试结束后执行</span></div><div class="line">  after(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 关闭子进程</span></div><div class="line">    child.kill()</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  it(<span class="string">'点击后标题改变'</span>, (done) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> nightmare = Nightmare(&#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;)</div><div class="line">    nightmare</div><div class="line">      .goto(<span class="string">'http://127.0.0.1:8888/index.html'</span>)</div><div class="line">      .click(<span class="string">'#demo'</span>)</div><div class="line">      .wait(<span class="number">1000</span>)</div><div class="line">      .evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">'#demo'</span>)</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          text: dom.textContent,</div><div class="line">          color: <span class="built_in">window</span>.getComputedStyle(dom).color</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">      .end()</div><div class="line">      .then(<span class="function">(<span class="params">&#123; text, color &#125;</span>) =&gt;</span> &#123;</div><div class="line">        expect(text).to.equal(<span class="string">'hello wtt1'</span>)</div><div class="line">        expect(color).to.equal(<span class="string">'rgb(0, 0, 255)'</span>)</div><div class="line">        done()</div><div class="line">      &#125;)</div><div class="line">      .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(err)</div><div class="line">        done()</div><div class="line">      &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>  (4) package.json<br>  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"nightmare-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"server.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"mocha -t 15000 test.js"</span>,</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node server.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"chai"</span>: <span class="string">"^4.1.2"</span>,</div><div class="line">    <span class="attr">"http-server"</span>: <span class="string">"^0.10.0"</span>,</div><div class="line">    <span class="attr">"nightmare"</span>: <span class="string">"^2.10.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run <span class="built_in">test</span></div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Mocha(unit testing)]]></title>
      <url>/2017/09/22/mocha/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/weitongtong/test-demo/tree/master/mocha-demo" target="_blank" rel="external">mocha-demo</a><br><a href="https://mochajs.org" target="_blank" rel="external">mochajs.org</a></p>
<p>unit testing: 单元测试</p>
<p>(1) 安装 Mocha 和 Chai<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> mocha-demo</div><div class="line">$ npm i mocha -D</div><div class="line">$ npm i chai -D</div></pre></td></tr></table></figure></p>
<blockquote>
<p>chai 为断言库 可任意选择</p>
</blockquote>
<p>(2) 打开我们要测试的脚本 src/add.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(3) 编写一个测试脚本 src/add.test.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> add = <span class="built_in">require</span>(<span class="string">'./add.js'</span>)</div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>) <span class="comment">// node原生自带</span></div><div class="line"><span class="keyword">const</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect <span class="comment">// chai模块</span></div><div class="line"></div><div class="line">describe(<span class="string">'测试add方法'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'1 + 1 应该等于 2'</span>, () =&gt; &#123;</div><div class="line">    expect(add(<span class="number">1</span>, <span class="number">1</span>)).to.be.equal(<span class="number">2</span>)</div><div class="line">  &#125;)</div><div class="line">  it(<span class="string">'3 + (-3) 应该等于 0'</span>, () =&gt; &#123;</div><div class="line">    assert.equal(<span class="number">0</span>, add(<span class="number">3</span>, <span class="number">-3</span>))</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>(4) package.json 中配置 script<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"mocha-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"mocha src/*.test.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"chai"</span>: <span class="string">"^4.1.2"</span>,</div><div class="line">    <span class="attr">"mocha"</span>: <span class="string">"^3.5.3"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p><img src="http://oifogbmox.bkt.clouddn.com/170922-1.png" alt="image"></p>
<p>测试脚本与所要测试的源码脚本同名，但是后缀名为<code>.test.js</code>（表示测试）或者<code>.spec.js</code>（表示规格）。比如，<code>add.js</code>的测试脚本名字就是<code>add.test.js</code>。</p>
<p>测试脚本里面应该包括一个或多个<code>describe</code>块，每个<code>describe</code>块应该包括一个或多个<code>it</code>块。</p>
<p><code>describe</code>块称为”<strong>测试套件</strong>“<code>（test suite）</code>，表示一组相关的测试。它是一个函数，第一个参数是测试套件的名称（”加法函数的测试”），第二个参数是一个实际执行的函数。</p>
<p><code>it</code>块称为”<strong>测试用例</strong>“<code>（test case）</code>，<strong>表示一个单独的测试，是测试的最小单位。</strong>它也是一个函数，第一个参数是测试用例的名称（”1 加 1 应该等于 2”），第二个参数是一个实际执行的函数。</p>
<p>上面的测试脚本里面，有一句断言:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expect(add(<span class="number">1</span>, <span class="number">1</span>)).to.be.equal(<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>所谓”断言”，就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。上面这句断言的意思是，调用<code>add(1, 1)</code>，结果应该等于2。</p>
<p>所有的测试用例（<code>it</code>块）都应该含有一句或多句的断言。它是编写测试用例的关键。断言功能由断言库来实现，<code>Mocha</code>本身不带断言库，所以必须先引入断言库。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect</div></pre></td></tr></table></figure></p>
<p>断言库有很多种，<code>Mocha</code>并不限制使用哪一种。上面代码引入的断言库是<code>chai</code>，并且指定使用它的<code>expect</code>断言风格。</p>
<p>暂时这么多，后续补充。。。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用git钩子做eslint校验]]></title>
      <url>/2017/09/21/%E4%BD%BF%E7%94%A8git%E9%92%A9%E5%AD%90%E5%81%9Aeslint%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/weitongtong/git-eslint-hook" target="_blank" rel="external">demo地址</a></p>
<h2 id="git-hook"><a href="#git-hook" class="headerlink" title="git hook"></a>git hook</h2><p>在 git 中，执行 commit 、 push 等特殊事件时，都会触发执行一个或多个任意的 shell 脚本，我们称之为git钩子，它存放在 .git/hooks 目录下，我们可以看到目录下有 commit-msg.sample 、pre-commit.sample 等文件，这些都是案例文件，不会执行，要想执行的话把后面的 .sample 后缀去掉就可以了。</p>
<p>钩子从执行顺序上分两类：</p>
<ul>
<li>前置（pre）钩子，在动作完成前调用</li>
<li>后置（post）钩子，在动作完成后执行</li>
</ul>
<p>通常情况下，<strong>如果前置钩子一非零状态下退出，那么git动作就会终止</strong>，这样我们就可以在commit前对提交的内容做一些校验，如果不符合规定就不让提交。</p>
<blockquote>
<p>钩子默认是不会继承的，也就是说如果你从仓库clone下来的版本库是没有这些钩子的。</p>
</blockquote>
<h2 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h2><p>.git/hooks 目录下的都是命令文件，我是看不懂的，咋办？<br>别急 看这个 <a href="https://github.com/observing/pre-commit" target="_blank" rel="external">pre-commit</a><br>然后，我们就不用手动去修改 .git/hooks/commit-msg 文件了</p>
<h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p><a href="https://github.com/eslint/eslint" target="_blank" rel="external">eslint</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo npm i eslint -g</div><div class="line">$ mkdir demo &amp;&amp; <span class="built_in">cd</span> demo</div><div class="line">$ eslint --init // 会自动创建 .eslintrc.js</div><div class="line">$ touch .eslintignore // 创建 .eslintignore</div><div class="line">$ eslint index.js // eslint检测 index.js 文件</div></pre></td></tr></table></figure></p>
<p>最后，看重头戏，package.json配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"eslint-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">".eslintrc.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"node_modules/.bin/eslint src"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"pre-commit"</span>: [</div><div class="line">    <span class="string">"test"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"eslint"</span>: <span class="string">"^3.10.2"</span>,</div><div class="line">    <span class="attr">"pre-commit"</span>: <span class="string">"^1.2.2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们 commit 的时候 就会去执行 npm run test ，如果有异常就会终止 git 的操作了。暂时先到这吧，后续再补充。。。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[syncRequest]]></title>
      <url>/2017/09/21/syncRequest/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 同步请求</span></div><div class="line"><span class="comment">  * @param &#123;any&#125; obj 请求对象</span></div><div class="line"><span class="comment">  * @returns &#123;promise&#125; http</span></div><div class="line"><span class="comment">  */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncRequest</span> (<span class="params">&#123; method = <span class="string">'GET'</span>, url, data, headers = &#123;&#125; &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">    xhr.open(method, url, <span class="literal">false</span>)</div><div class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>)</div><div class="line"></div><div class="line">    <span class="built_in">Object</span>.keys(headers).forEach(<span class="function"><span class="params">header</span> =&gt;</span> &#123;</div><div class="line">      xhr.setRequestHeader(header, headers[header])</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    xhr.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (xhr.readyState !== <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">let</span> responseContent</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        responseContent = <span class="built_in">JSON</span>.parse(xhr.responseText)</div><div class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">        <span class="comment">// there is error</span></div><div class="line">      &#125;</div><div class="line">      responseContent = responseContent || xhr.responseText</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</div><div class="line">        resolve(responseContent)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(responseContent)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    xhr.send(<span class="built_in">JSON</span>.stringify(data))</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">syncRequest(&#123;</div><div class="line">  method: <span class="string">'put'</span>,</div><div class="line">  url: <span class="string">'xxx'</span>,</div><div class="line">  data: &#123;&#125;,</div><div class="line">  headers: &#123;</div><div class="line">    Accept: <span class="string">'application/json, text/plain, */*; charset=utf-8'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// something...</span></div><div class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// something...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[实现一个CMD模块加载器]]></title>
      <url>/2017/09/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AACMD%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/zhoujie_zhoujie/article/details/70173430" target="_blank" rel="external">资料</a></p>
<h2 id="模块加载流程"><a href="#模块加载流程" class="headerlink" title="模块加载流程"></a>模块加载流程</h2><p>  <img src="http://oifogbmox.bkt.clouddn.com/170920-cmd.png" alt="image"></p>
<ol>
<li>首先，通过 use 方法来加载入口模块，并接收一个回调函数， 当模块加载完成， 会调用回调函数，并传入对应的模块。use 方法会 check 模块有没有缓存，如果有，则从缓存中获取模块，如果没有，则创建并加载模块。</li>
<li>获取到模块后，模块可能还没有 load 完成，所以需要在模块上绑定一个 “complete” 事件，模块加载完成会触发这个事件，这时候才调用回调函数。</li>
<li>创建一个模块时，id就是模块的地址，通过创建 script 标签的方式异步加载模块的代码（factory），factory 加载完成后，会 check factory 中有没有 require 别的子模块:<ul>
<li>如果有，继续加载其子模块，并在子模块上绑定 “complete” 事件，来触发本身 的 “complete” 事件；</li>
<li>如果没有则直接触发本身的 “complete” 事件。</li>
</ul>
</li>
<li>如果子模块中还有依赖，则会递归这个过程。</li>
<li>通过事件由里到外的传递，当所有依赖的模块都 complete 的时候，最外层的入口模块才会触发 “complete” 事件，use 方法中的回调函数才会被调用。</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pvue]]></title>
      <url>/2017/09/19/pvue/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/weitongtong/pvue" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于vue]]></title>
      <url>/2017/09/18/%E5%85%B3%E4%BA%8Evue/</url>
      <content type="html"><![CDATA[<h4 id="1-vue实例"><a href="#1-vue实例" class="headerlink" title="1. vue实例"></a>1. vue实例</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>, <span class="comment">// 挂载点 实例挂载之后，元素可以用 vm.$el 访问</span></div><div class="line">  template: <span class="comment">// 字符串模板，模板将会 替换 挂载的元素。如果选项中包含 render 函数，则 template 将被忽略</span></div><div class="line">  data: &#123;</div><div class="line">    message: <span class="string">'hello, world'</span></div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="2-vue-extend-vue-component"><a href="#2-vue-extend-vue-component" class="headerlink" title="2. vue.extend, vue.component"></a>2. vue.extend, vue.component</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myComponentOption = &#123;</div><div class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;'</span>,</div><div class="line">  data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  props: [<span class="string">'message'</span>]</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Bvue = Vue.extend(bComponentOption)</div><div class="line"><span class="keyword">var</span> bVue = <span class="keyword">new</span> Bvue(&#123;</div><div class="line">  el: <span class="string">'#bb'</span>, <span class="comment">// way-1</span></div><div class="line">  propsData: &#123;</div><div class="line">    message: <span class="string">'hello vue'</span>,</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// way-2</span></div><div class="line"><span class="comment">// bVue.$mount('#bb')</span></div><div class="line"></div><div class="line"><span class="comment">// way-3</span></div><div class="line"><span class="comment">// bVue.$mount()</span></div><div class="line"><span class="comment">// document.getElementById('bb').appendChild(bVue.$el)</span></div><div class="line"></div><div class="line"><span class="comment">// 注册全局组件</span></div><div class="line"><span class="keyword">var</span> bComponent = Vue.component(<span class="string">'b-component'</span>, Bvue)</div><div class="line"></div><div class="line">bVue <span class="keyword">instanceof</span> Vue <span class="comment">// true</span></div><div class="line">bComponent <span class="keyword">instanceof</span> Vue <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h4 id="3-运行时-编译器-VS-只包含运行时"><a href="#3-运行时-编译器-VS-只包含运行时" class="headerlink" title="3. 运行时+编译器 VS 只包含运行时"></a>3. 运行时+编译器 VS 只包含运行时</h4><p>如果你需要在客户端编译模板（比如传入一个字符串给<code>template</code>选项，或挂载到一个元素上并以其内部的<code>HTML</code>作为模板），你将需要加上编译器，即完整版的构建。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 需要编译器</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123;hi&#125;&#125;&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 不需要编译器</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  render(h) &#123;</div><div class="line">    <span class="keyword">return</span> h(<span class="string">'div'</span>, <span class="keyword">this</span>.hi)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>当使用 <code>vue-loader</code>或<code>verify</code>的时候，<code>*.vue</code>文件内部的模板会在构建时预编译成js。你在最终打包好的包里是不需要编译器的，因为只是运行时构建即可。</p>
<a id="more"></a>
<p>生命周期：<br><img style="margin: 0 auto;" src="http://oifogbmox.bkt.clouddn.com/170918_2.png"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[something]]></title>
      <url>/2017/09/18/something/</url>
      <content type="html"><![CDATA[<style>
  .boxbox{
    border: 2px dashed #ddd;
    padding: 0 20px;
    margin-bottom: 20px;
  }
  br{
    padding: 0;
    margin: 0;
  }
</style>

<div class="boxbox"><br>DOM文档加载的步骤为：<br>1. 解析HTML结构。<br>2. 加载外部脚本和样式表文件。<br>3. 解析并执行脚本代码。<br>4. DOM树构建完成。// DOMContentLoaded<br>5. 加载图片等外部文件。<br>6. 页面加载完毕。// load<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// something...</span></div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// something...</span></div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br>innerHTML: 从对象的起始位置到终止位置的全部内容,不包括Html标签。<br>outerHTML: 除了包含innerHTML的全部内容外, 还包含对象标签本身。<br>demo:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"test"</span>&gt; </div><div class="line">   &lt;span style=<span class="string">"color:red"</span>&gt;test1&lt;<span class="regexp">/span&gt; test2 </span></div><div class="line"><span class="regexp">&lt;/</span>div&gt;</div><div class="line"><span class="comment">// innerHTML: "&lt;span style="color:red"&gt;test1&lt;/span&gt; test2 "</span></div><div class="line"><span class="comment">// outerHTML: "&lt;div id="test"&gt;&lt;span style="color:red"&gt;test1&lt;/span&gt; test2 &lt;/div&gt;"</span></div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br>判断是否为{}空对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmptyObj</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (obj === <span class="literal">undefined</span> || obj === <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyNames(obj).length === <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br>Array.prototype.sort(compareFunction)<br><br>1. 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前。<br>2. 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。<br>3. 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, <span class="number">41</span>, <span class="number">-9046</span>, <span class="number">2047</span>, <span class="number">1118</span>, <span class="number">8477</span>, <span class="number">8446</span>, <span class="number">279</span>, <span class="number">4925</span>, <span class="number">7380</span>, <span class="number">-1719</span>, <span class="number">3855</span>]</div><div class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> a - b <span class="comment">// 切记 不要 直接返回一个Bolean类型的值 如： a &lt; b </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br>node 调试命令<br>“debug”: “node –debug-brk –inspect index.js”<br></div>

<div class="boxbox"><br>301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL。<br>302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源。<br>304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存。<br>401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用。<br>403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因。<br>404 Not Found 请求的资源不存在，例如，输入了错误的URL。<br>500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求。<br>503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。<br><br>301和302的区别：<br><br>301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。<br><br>他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址。<br><br>302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301。<br></div>

<div class="boxbox"><br>（1） 检测某个 属性 是否支持<br>核心思路：在任一元素的 element.style 对象上坚持该属性是否存在<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testProperty</span>(<span class="params">property</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> root = <span class="built_in">document</span>.documentElement <span class="comment">// 整个&lt;html&gt;&lt;/html&gt;</span></div><div class="line">  <span class="keyword">if</span> (property <span class="keyword">in</span> root) &#123;</div><div class="line">    root.classList.add(property.toLowerCase()) <span class="comment">// toLowerCase转小写</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">  root.classList.add(<span class="string">`no-<span class="subst">$&#123;property.toLowerCase()&#125;</span>`</span>)</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>（2） 检测某个具体的 属性值 是否支持<br>核心思路：把它赋给对应的属性 再检查浏览器是不是还保存着这个值<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testValue</span>(<span class="params">id, value, property</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> dummy = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</div><div class="line">  dummy.style[property] = value</div><div class="line">  <span class="keyword">if</span> (dummy.style[property]) &#123;</div><div class="line">    root.classList.add(id)</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">  root.classList.add(<span class="string">`no-<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>（3） 当然 浏览器可以 解析 某个css特征 并不代表它已经实现 （或正确实现）了这个特性。<br></div>

<div class="boxbox"><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">~version: 大概匹配某个版本</div><div class="line">未指定的可以任意</div><div class="line">如：~1.1.2，表示&gt;=1.1.2 &lt;1.2.0，可以是1.1.2，1.1.3，1.1.4，.....，1.1.n </div><div class="line">如：~1.1，表示&gt;=1.1.0 &lt;1.2.0，可以是同上</div><div class="line">如：~1，表示&gt;=1.0.0 &lt;2.0.0，可以是1.0.0，1.0.1，1.0.2，.....，1.0.n，1.1.n，1.2.n，.....，1.n.n</div><div class="line"></div><div class="line">^version: 兼容某个版本</div><div class="line">版本号中最左边的非0数字的右侧可以任意</div><div class="line">如果缺少某个版本号，则这个版本号的位置可以任意</div><div class="line">如：^1.1.2 ，表示&gt;=1.1.2 &lt;2.0.0，可以是1.1.2，1.1.3，.....，1.1.n，1.2.n，.....，1.n.n</div><div class="line">如：^0.2.3 ，表示&gt;=0.2.3 &lt;0.3.0，可以是0.2.3，0.2.4，.....，0.2.n</div><div class="line">如：^0.0，表示 &gt;=0.0.0 &lt;0.1.0，可以是0.0.0，0.0.1，.....，0.0.n</div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// `npm run build --report`</span></div><div class="line"><span class="comment">// bundleAnalyzerReport: process.env.npm_config_report</span></div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br>  <a href="https://zhuanlan.zhihu.com/p/22983372" target="_blank" rel="external">监听数组</a><br></div>

<div class="boxbox"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">  rules: [</div><div class="line">    &#123;</div><div class="line">      test: /\.vue$/,</div><div class="line">      loader: &apos;vue-loader&apos;,</div><div class="line">      options: &#123;</div><div class="line">        loaders: &#123;</div><div class="line">          css: [</div><div class="line">            &apos;vue-style-loader&apos;,</div><div class="line">            &#123;</div><div class="line">              loader: &apos;css-loader&apos;,</div><div class="line">              options: &#123;</div><div class="line">                minimize: false,</div><div class="line">                sourceMap: false,</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          ],</div><div class="line">          stylus: [</div><div class="line">            &apos;vue-style-loader&apos;,</div><div class="line">            &#123;</div><div class="line">              loader: &apos;css-loader&apos;,</div><div class="line">              options: &#123;</div><div class="line">                minimize: false,</div><div class="line">                sourceMap: false</div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">              loader: &apos;stylus-loader&apos;,</div><div class="line">              options: &#123;</div><div class="line">                sourceMap: false</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">        &#125;,</div><div class="line">        transformToRequire: &#123;</div><div class="line">          video: &apos;src&apos;,</div><div class="line">          source: &apos;src&apos;,</div><div class="line">          img: &apos;src&apos;,</div><div class="line">          image: &apos;xlink:href&apos;,</div><div class="line">        &#125;</div><div class="line">      &#125;, </div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      test: /\.js$/,</div><div class="line">      loader: &apos;babel-loader&apos;,</div><div class="line">      include: [`$&#123;path.join(__dirname, &apos;../src&apos;)&#125;`]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</div><div class="line">      loader: &apos;url-loader&apos;,</div><div class="line">      options: &#123;</div><div class="line">        limit: 10000,</div><div class="line">        name: &apos;static/img/[name].[hash:7].[ext]&apos;,</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      test: /\.css$/,</div><div class="line">      use: [</div><div class="line">        &apos;vue-style-loader&apos;,</div><div class="line">        &#123;</div><div class="line">          loader: &apos;css-loader&apos;,</div><div class="line">          options: &#123;</div><div class="line">            minimize: false,</div><div class="line">            sourceMap: false</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      test: /\.stylus$/,</div><div class="line">      use: [</div><div class="line">        &apos;vue-style-loader&apos;,</div><div class="line">        &#123;</div><div class="line">          loader: &apos;css-loader&apos;,</div><div class="line">          options: &#123;</div><div class="line">            minimize: false,</div><div class="line">            sourceMap: false</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          loader: &apos;stylus-loader&apos;,</div><div class="line">          options: &#123;</div><div class="line">            sourceMap: false</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">  <span class="string">"vue"</span>: <span class="string">"^2.5.2"</span>,</div><div class="line">  <span class="string">"vue-router"</span>: <span class="string">"^3.0.1"</span></div><div class="line">&#125;,</div><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">  <span class="string">"autoprefixer"</span>: <span class="string">"^7.1.2"</span>,</div><div class="line">  <span class="string">"babel-core"</span>: <span class="string">"^6.22.1"</span>,</div><div class="line">  <span class="string">"babel-loader"</span>: <span class="string">"^7.1.1"</span>,</div><div class="line">  <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.22.0"</span>,</div><div class="line">  <span class="string">"babel-preset-env"</span>: <span class="string">"^1.3.2"</span>,</div><div class="line">  <span class="string">"babel-preset-stage-2"</span>: <span class="string">"^6.22.0"</span>,</div><div class="line">  <span class="string">"babel-register"</span>: <span class="string">"^6.22.0"</span>,</div><div class="line">  <span class="string">"chalk"</span>: <span class="string">"^2.0.1"</span>,</div><div class="line">  <span class="string">"connect-history-api-fallback"</span>: <span class="string">"^1.3.0"</span>,</div><div class="line">  <span class="string">"copy-webpack-plugin"</span>: <span class="string">"^4.0.1"</span>,</div><div class="line">  <span class="string">"css-loader"</span>: <span class="string">"^0.28.0"</span>,</div><div class="line">  <span class="string">"eventsource-polyfill"</span>: <span class="string">"^0.9.6"</span>,</div><div class="line">  <span class="string">"express"</span>: <span class="string">"^4.14.1"</span>,</div><div class="line">  <span class="string">"extract-text-webpack-plugin"</span>: <span class="string">"^3.0.0"</span>,</div><div class="line">  <span class="string">"file-loader"</span>: <span class="string">"^1.1.4"</span>,</div><div class="line">  <span class="string">"friendly-errors-webpack-plugin"</span>: <span class="string">"^1.6.1"</span>,</div><div class="line">  <span class="string">"html-webpack-plugin"</span>: <span class="string">"^2.30.1"</span>,</div><div class="line">  <span class="string">"http-proxy-middleware"</span>: <span class="string">"^0.17.3"</span>,</div><div class="line">  <span class="string">"opn"</span>: <span class="string">"^5.1.0"</span>,</div><div class="line">  <span class="string">"optimize-css-assets-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</div><div class="line">  <span class="string">"ora"</span>: <span class="string">"^1.2.0"</span>,</div><div class="line">  <span class="string">"portfinder"</span>: <span class="string">"^1.0.13"</span>,</div><div class="line">  <span class="string">"rimraf"</span>: <span class="string">"^2.6.0"</span>,</div><div class="line">  <span class="string">"semver"</span>: <span class="string">"^5.3.0"</span>,</div><div class="line">  <span class="string">"shelljs"</span>: <span class="string">"^0.7.6"</span>,</div><div class="line">  <span class="string">"url-loader"</span>: <span class="string">"^0.5.8"</span>,</div><div class="line">  <span class="string">"vue-loader"</span>: <span class="string">"^13.3.0"</span>,</div><div class="line">  <span class="string">"vue-style-loader"</span>: <span class="string">"^3.0.1"</span>,</div><div class="line">  <span class="string">"vue-template-compiler"</span>: <span class="string">"^2.5.2"</span>,</div><div class="line">  <span class="string">"webpack"</span>: <span class="string">"^3.6.0"</span>,</div><div class="line">  <span class="string">"webpack-bundle-analyzer"</span>: <span class="string">"^2.9.0"</span>,</div><div class="line">  <span class="string">"webpack-dev-middleware"</span>: <span class="string">"^1.12.0"</span>,</div><div class="line">  <span class="string">"webpack-hot-middleware"</span>: <span class="string">"^2.18.2"</span>,</div><div class="line">  <span class="string">"webpack-merge"</span>: <span class="string">"^4.1.0"</span>,</div><div class="line">  <span class="string">"winston"</span>: <span class="string">"^2.4.0"</span></div><div class="line">&#125;,</div><div class="line"><span class="string">"engines"</span>: &#123;</div><div class="line">  <span class="string">"node"</span>: <span class="string">"&gt;= 4.0.0"</span>,</div><div class="line">  <span class="string">"npm"</span>: <span class="string">"&gt;= 3.0.0"</span></div><div class="line">&#125;,</div><div class="line"><span class="string">"browserslist"</span>: [</div><div class="line">  <span class="string">"&gt; 1%"</span>,</div><div class="line">  <span class="string">"last 2 versions"</span>,</div><div class="line">  <span class="string">"not ie &lt;= 8"</span></div><div class="line">]</div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br>  绝对定位元素的水平垂直居中：<br>  way1: 设置50%<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>  way2: 利用绝对定位元素的自动伸缩特性<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right </span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br></div>

<div class="boxbox"><br>  <a href="http://caibaojian.com/book/" target="_blank" rel="external">可能有用的学习资料</a><br></div>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.boxbox').forEach((dom) => {
      dom.removeChild(dom.firstChild)
      dom.removeChild(dom.lastChild)
    })
  }, false)
</script>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Element Vs Node]]></title>
      <url>/2017/09/18/Element-Vs-Node/</url>
      <content type="html"><![CDATA[<p>Node是一个接口，许多DOM类型从这个接口继承，并允许类似地处理（或测试）这些各种类型。</p>
<p>以下接口都从Node继承其方法和属性:<br>Document, Element, CharacterData (which Text, Comment, and CDATASection inherit), ProcessingInstruction, DocumentFragment, DocumentType, Notation, Entity, EntityReference</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>China<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- My comment ...  --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>China is a popular country with...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>See details<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body <span class="comment">// Element</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id'</span>) <span class="comment">// Element</span></div><div class="line"><span class="built_in">document</span>.body.childNodes <span class="comment">// 返回所有 node 子节点</span></div><div class="line"><span class="built_in">document</span>.body.children <span class="comment">// 只返回 Element 子节点</span></div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.firstChild <span class="comment">// Node</span></div><div class="line"><span class="built_in">document</span>.body.firstElementChild <span class="comment">// Element</span></div></pre></td></tr></table></figure>
<p><img src="http://oifogbmox.bkt.clouddn.com/170918_1.png" alt="image"></p>
<table>
<thead>
<tr>
<th>节点类型</th>
<th>NodeType</th>
</tr>
</thead>
<tbody>
<tr>
<td>元素节点 ELEMENT_NODE</td>
<td>1</td>
</tr>
<tr>
<td>属性节点 ATTRIBUTE_NODE</td>
<td>2</td>
</tr>
<tr>
<td>文本节点 TEXT_NODE</td>
<td>3</td>
</tr>
<tr>
<td>注释节点 COMMENT_NODE</td>
<td>8</td>
</tr>
<tr>
<td>文档 DOCUMENT_NODE</td>
<td>9</td>
</tr>
</tbody>
</table>
<p>Node 常用属性:</p>
<ul>
<li>Node.firstChild</li>
<li>Node.lastChild</li>
<li>Node.nodeName // 节点名称</li>
<li>Node.nodeType // 节点的类型 Node.ELEMENT_NODE</li>
<li>Node.nodeValue // 对于文档节点来说, nodeValue返回null. 对于text, comment, 和 CDATA 节点来说, nodeValue返回该节点的文本内容. 对于 attribute 节点来说, 返回该属性的属性值.</li>
<li>…</li>
</ul>
<p>[MDN web docs]<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/Node</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[md-syntax]]></title>
      <url>/2017/09/16/md-syntax/</url>
      <content type="html"><![CDATA[<p>标题1-5</p>
<h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><p># 标题1</p>
<hr>
<p>无序列表 可以是 <code>-</code> 也可以是 <code>*</code></p>
<ul>
<li>aa</li>
<li>bb</li>
<li>cc</li>
</ul>
<hr>
<p>有序列表</p>
<ol>
<li>aa</li>
<li>bb</li>
<li>cc</li>
</ol>
<hr>
<p>横线</p>
<p>---</p>
<hr>
<p><strong>加粗</strong></p>
<p>**加粗**</p>
<hr>
<p><del>中划线</del></p>
<p>~~中划线~~</p>
<hr>
<p><em>斜体</em></p>
<p>*斜体*</p>
<hr>
<blockquote>
<p>提示</p>
</blockquote>
<p>> 提示</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">图片</div><div class="line">![image](http://oifogbmox.bkt.clouddn.com/1.jpg)</div></pre></td></tr></table></figure>
<hr>
<p><code>文本</code></p>
<p>`文本`</p>
<hr>
<p><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">地址</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[rollup.js]]></title>
      <url>/2017/09/16/rollup-js/</url>
      <content type="html"><![CDATA[<h1 id="初探-Rollup-js"><a href="#初探-Rollup-js" class="headerlink" title="初探-Rollup.js"></a>初探-Rollup.js</h1><h2 id="一、为什么模块化"><a href="#一、为什么模块化" class="headerlink" title="一、为什么模块化"></a>一、为什么模块化</h2><ul>
<li>更好的代码组织方式</li>
<li>更好的依赖处理</li>
<li>性能优化</li>
<li>…</li>
</ul>
<a id="more"></a>
<h2 id="二、为什么要用Rollup打包工具"><a href="#二、为什么要用Rollup打包工具" class="headerlink" title="二、为什么要用Rollup打包工具"></a>二、为什么要用Rollup打包工具</h2><p>先做个简单的测试，我们准备了一个 module.js 文件和 entry.js 文件，分别用 Rollup 和 Webpack 打包。<br><a href="https://www.baidu.com" target="_blank" rel="external">demo地址</a></p>
<p>package.json 如下：<br><img src="http://oifogbmox.bkt.clouddn.com/ro1.png" alt="image"></p>
<p>module.js 如下：<br><img src="http://oifogbmox.bkt.clouddn.com/ro2.png" alt="image"></p>
<p>entry.js 如下：<br><img src="http://oifogbmox.bkt.clouddn.com/ro3.png" alt="image"></p>
<p>rollup.config.js 如下：<br><img src="http://oifogbmox.bkt.clouddn.com/ro4.png" alt="image"></p>
<p>webpack.config.js 如下<br><img src="http://oifogbmox.bkt.clouddn.com/ro5.png" alt="image"></p>
<ol>
<li><p>对比打包之后的文件，webpack打包出来的约3k，而rollup的不到1k<br><img src="http://oifogbmox.bkt.clouddn.com/ro6.png" alt="image"></p>
</li>
<li><p>Tree Shaking<br>Rollup是第一个提出Tree Shaking的打包工具。简单来说，Rollup会静态分析你所引入的模块，去掉没有真正用到的部分，只引入你需要的部分，减少体积。<br>rollup:<br><img src="http://oifogbmox.bkt.clouddn.com/ro7.png" alt="image"><br>webpack:<br><img src="http://oifogbmox.bkt.clouddn.com/ro8.png" alt="image"></p>
<blockquote>
<p>Webpack2.0 已经支持 Tree Shaking, 但配置较为复杂 具体见官网</p>
</blockquote>
</li>
<li><p>Rollup 是基于ES6实现的代码模块化<br>Rollup 对代码模块完全使用新的标准化格式，这些标准都包含在 JavaScript 的 ES6 版本中，而不是以前的特殊解决方案，如 CommonJS 和 AMD。</p>
<p>ES6的部分功能</p>
<ul>
<li>语法更好</li>
<li>模块导出（export）的是绑定，而不是值<br>ES6:<br><img src="http://oifogbmox.bkt.clouddn.com/ro9.png" alt="image">output: 0 1<br>Commonjs:<br><img src="http://oifogbmox.bkt.clouddn.com/ro10.png" alt="image">output: 0 0</li>
<li>支持循环依赖</li>
</ul>
</li>
</ol>
<h2 id="三、如何使用"><a href="#三、如何使用" class="headerlink" title="三、如何使用"></a>三、如何使用</h2><ol>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm i rollup -g</div></pre></td></tr></table></figure>
</li>
<li><p>使用方法（cli / api / other plugin）<br>Rollup 提供了多种打包方式，通过 format 属性可以设置你想要打包成的代码类型：</p>
<p>amd - 输出成AMD模块规则，RequireJS可以用<br>cjs - CommonJS规则，适合Node，Browserify，Webpack 等<br>es - 默认值，不改变代码<br>iife - 输出自执行函数，最适合导入html中的script标签，且代码更小<br>umd - 通用模式，amd, cjs, iife都能用</p>
</li>
<li><p>使用配置文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rollup.config.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  input: <span class="string">'src/main.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    file: <span class="string">'bundle.js'</span>,</div><div class="line">    format: <span class="string">'cjs'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 默认 rollup.config.js</div><div class="line">rollup -c</div><div class="line">// 指定配置文件</div><div class="line">rollup --config rollup.config.dev.js</div><div class="line">rollup --config rollup.config.prod.js</div></pre></td></tr></table></figure>
</li>
<li><p>使用插件 <a href="https://github.com/rollup/rollup/wiki/Plugins" target="_blank" rel="external">Plugins</a><br>通常我们需要导入从npm下载的模块(importing modules installed with npm) 比如：通过label编译模块，使用json等。For that, we use plugins, which change the behaviour of Rollup at key points in the bundling process. A list of available plugins is maintained on the Rollup wiki.</p>
<p>以 <strong>rollup-plugin-json</strong> 为例 它能够使rollup导入json文件里的数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev rollup-plugin-json</div></pre></td></tr></table></figure>
<blockquote>
<p>我们使用–save-dev而不是–save是因为我的代码在运行时不是真正的以来这个插件——只是在我们编译bundle时依赖而已。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rollup.config.js</span></div><div class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  entry: <span class="string">'./static/js/entry.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    file: <span class="string">'rollup_bundle_iife.js'</span>,</div><div class="line">    format: <span class="string">'iife'</span>,</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    json()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结合npm库使用rollup<br>在某种情况下，你的项目需要下载npm的第三方模块到你的node_module文件夹中。跟其他的Webpack Browserfy 不同，Rollup不知道’out of box’ 怎么处理这些依赖，我们需要添加一些设置。<br>以 <strong>the-answer</strong> 为例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i the-answer -S</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> answer <span class="keyword">from</span> <span class="string">'the-answer'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'the answer is '</span> + answer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译报警告</p>
<blockquote>
<p>(!) Unresolved dependencies<br> <a href="https://github.com/rollup/rollup/wiki/Troubleshooting#treating-module-as-external-dependency" target="_blank" rel="external">https://github.com/rollup/rollup/wiki/Troubleshooting#treating-module-as-external-dependency</a><br> the-answer (imported by main.js)</p>
</blockquote>
<p>导出来的bundle.js仍然能够在Node.js下运行，因为import声明被转化成CommonJS风格的require语句，但是the-answer没有放到bundle中，因此我们需要一个插件。</p>
<p><strong>rollup-plugin-node-resolve 插件</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev rollup-plugin-node-resolve</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rollup.config.js</span></div><div class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  input: <span class="string">'src/main.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    file: <span class="string">'bundle.js'</span></div><div class="line">    format: <span class="string">'cjs'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [ resolve() ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>rollup-plugin-commonjs插件</strong></p>
<p>有些库导出的是es6模块，所以你可import——the-answer就是这种。然而npm的大多数第三方库是CommonJS风格的模块。在其发生改变之前，我们需要转换CommonJS为ES2015的模块，然后再用rollup处理。<br>这正是rollup-plugin-commonjs的功能所在。</p>
</li>
<li><p>同级依赖peer dependencies</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rollup.config.js</span></div><div class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  input: <span class="string">'src/main.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    file: <span class="string">'bundle.js'</span>,</div><div class="line">    format: <span class="string">'cjs'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [resolve(&#123;</div><div class="line">    <span class="comment">// pass custom options to the resolve plugin（自定义）</span></div><div class="line">    customResolveOptions: &#123;</div><div class="line">      moduleDirectory: <span class="string">'node_modules'</span></div><div class="line">    &#125;</div><div class="line">  &#125;)],</div><div class="line">  <span class="comment">// indicate which modules should be treated as external (这里把lodash作为同级依赖 不打包进来)</span></div><div class="line">  external: [<span class="string">'lodash'</span>]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>结合Babel使用rollup<br>很多开发者会在他们的项目中使用Babel，因此他们可以使用一些超前的es6特性，这样能够在浏览器和node环境中使用。<br>同时使用rollup和Babel的最简单的方法是使用rollup-plugin-babel插件。安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D rollup-plugin-babel</div></pre></td></tr></table></figure>
<p>rollup.config.js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rollup.config.js</span></div><div class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</div><div class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  entry: <span class="string">'src/main.js'</span>,</div><div class="line">  format: <span class="string">'cjs'</span>,</div><div class="line">  plugins: [</div><div class="line">    resolve(),</div><div class="line">    babel(&#123;</div><div class="line">      exclude: <span class="string">'node_modules/**'</span> <span class="comment">// only transpile our source code</span></div><div class="line">    &#125;)</div><div class="line">  ],</div><div class="line">  dest: <span class="string">'bundle.js'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在babel能够真正的编译源码之前，你需要一些设置，创建一个新文件src/.babelrc：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [</div><div class="line">    [&quot;latest&quot;, &#123;</div><div class="line">      &quot;es2015&quot;: &#123;</div><div class="line">        &quot;modules&quot;: false</div><div class="line">      &#125;</div><div class="line">    &#125;]</div><div class="line">  ],</div><div class="line">  &quot;plugins&quot;: [&quot;external-helpers&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这一步有一些东西跟往常不太一样。首先我们设置modules:false，否则Babel将会在rollup转化前转化我们的模块为CommonJS风格，这样就无法实现rollup的目的（tree shaking）。</p>
<p>其次，我们使用了external-helpers插件，它使rollup在bundle的头部添加一次’helper’，而不是在每个使用模块的地方包含他们（这是默认行为)。</p>
<p>第三我们把.babelrc放在了src文件夹里，而不是项目的跟目录，如果我们售后需要它，这个允许我们有不同的.babelrc文件对应不同的需求，例如测试。（针对不同的需求设置不同的配置是个好的方法）</p>
<p>现在，在运行rollup之前，我们需要安装latest预设以及external-helers插件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D babel-preset-latest babel-plugin-external-helpers</div></pre></td></tr></table></figure>
<p>现在运行rollup生成不打了，此时可以使用es2015特性了。首先更新下src/main.js的内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> answer <span class="keyword">from</span> <span class="string">'the-answer'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`the answer is <span class="subst">$&#123;answer&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line">使用npm run build运行rollup，然后查看bundle。</div><div class="line"></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> index = <span class="number">42</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> main = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'the answer is '</span> + index);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="四、Big-list-of-options"><a href="#四、Big-list-of-options" class="headerlink" title="四、Big list of options"></a>四、Big list of options</h2><ol>
<li><p>globals -g / –globals<br>use for umd / iife bundles. For example, in a case like this…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div></pre></td></tr></table></figure>
<p>…we want to tell Rollup that the vue module ID equates to the global Vue variable:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rollup.config.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  format: <span class="string">'iife'</span>,</div><div class="line">  moduleName: <span class="string">'myBundle'</span>,</div><div class="line">  globals: &#123;</div><div class="line">    vue: <span class="string">'Vue'</span>, <span class="comment">// vue 模块在 全局中对应的变量名称是'Vue'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://rollupjs.org/" target="_blank" rel="external">官网</a><br><a href="https://segmentfault.com/a/1190000009910959#articleHeader7" target="_blank" rel="external">中文文档</a><br><a href="https://zhuanlan.zhihu.com/p/27832148/" target="_blank" rel="external">参考资料</a></p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Version number contrast]]></title>
      <url>/2017/09/16/Version-number-contrast/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toNum</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = a.toString();</div><div class="line">    <span class="keyword">var</span> c = a.split(<span class="string">'.'</span>);</div><div class="line">    <span class="keyword">var</span> num_place = [<span class="string">""</span>,<span class="string">"0"</span>,<span class="string">"00"</span>,<span class="string">"000"</span>,<span class="string">"0000"</span>], r = num_place.reverse();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; c.length; i++)&#123;</div><div class="line">        <span class="keyword">var</span> len = c[i].length;</div><div class="line">        c[i] = r[len] + c[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> res = c.join(<span class="string">''</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cpr_version</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _a = toNum(a), _b = toNum(b);</div><div class="line">    <span class="keyword">if</span>(_a == _b) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(_a &gt; _b) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(_a &lt; _b) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//var a = "2.2.3", b = "2.3.0";</span></div><div class="line"><span class="comment">//转化</span></div><div class="line"><span class="comment">//000200020003  000200030000</span></div><div class="line"><span class="comment">//cpr_version(a,b);</span></div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/16/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<hr>
<p><a href="http://fontawesome.io/" target="_blank" rel="external">hexo 图标地址</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
